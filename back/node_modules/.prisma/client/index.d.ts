
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Hub
 * 
 */
export type Hub = $Result.DefaultSelection<Prisma.$HubPayload>
/**
 * Model Path
 * 
 */
export type Path = $Result.DefaultSelection<Prisma.$PathPayload>
/**
 * Model Need
 * 
 */
export type Need = $Result.DefaultSelection<Prisma.$NeedPayload>
/**
 * Model Shipment
 * 
 */
export type Shipment = $Result.DefaultSelection<Prisma.$ShipmentPayload>
/**
 * Model Good
 * 
 */
export type Good = $Result.DefaultSelection<Prisma.$GoodPayload>
/**
 * Model HubStop
 * 
 */
export type HubStop = $Result.DefaultSelection<Prisma.$HubStopPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  VOLUNTEER: 'VOLUNTEER',
  DRIVER: 'DRIVER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Aid_Type: {
  FOOD: 'FOOD',
  CLOTHES: 'CLOTHES',
  MEDICINE: 'MEDICINE',
  MATERIALS: 'MATERIALS',
  GADGETS: 'GADGETS',
  OTHER: 'OTHER'
};

export type Aid_Type = (typeof Aid_Type)[keyof typeof Aid_Type]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Aid_Type = $Enums.Aid_Type

export const Aid_Type: typeof $Enums.Aid_Type

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.hub`: Exposes CRUD operations for the **Hub** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hubs
    * const hubs = await prisma.hub.findMany()
    * ```
    */
  get hub(): Prisma.HubDelegate<ExtArgs>;

  /**
   * `prisma.path`: Exposes CRUD operations for the **Path** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paths
    * const paths = await prisma.path.findMany()
    * ```
    */
  get path(): Prisma.PathDelegate<ExtArgs>;

  /**
   * `prisma.need`: Exposes CRUD operations for the **Need** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Needs
    * const needs = await prisma.need.findMany()
    * ```
    */
  get need(): Prisma.NeedDelegate<ExtArgs>;

  /**
   * `prisma.shipment`: Exposes CRUD operations for the **Shipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shipments
    * const shipments = await prisma.shipment.findMany()
    * ```
    */
  get shipment(): Prisma.ShipmentDelegate<ExtArgs>;

  /**
   * `prisma.good`: Exposes CRUD operations for the **Good** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goods
    * const goods = await prisma.good.findMany()
    * ```
    */
  get good(): Prisma.GoodDelegate<ExtArgs>;

  /**
   * `prisma.hubStop`: Exposes CRUD operations for the **HubStop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HubStops
    * const hubStops = await prisma.hubStop.findMany()
    * ```
    */
  get hubStop(): Prisma.HubStopDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Hub: 'Hub',
    Path: 'Path',
    Need: 'Need',
    Shipment: 'Shipment',
    Good: 'Good',
    HubStop: 'HubStop'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'hub' | 'path' | 'need' | 'shipment' | 'good' | 'hubStop'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Hub: {
        payload: Prisma.$HubPayload<ExtArgs>
        fields: Prisma.HubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HubFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HubFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          findFirst: {
            args: Prisma.HubFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HubFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          findMany: {
            args: Prisma.HubFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>[]
          }
          create: {
            args: Prisma.HubCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          createMany: {
            args: Prisma.HubCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HubDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          update: {
            args: Prisma.HubUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          deleteMany: {
            args: Prisma.HubDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HubUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HubUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubPayload>
          }
          aggregate: {
            args: Prisma.HubAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHub>
          }
          groupBy: {
            args: Prisma.HubGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HubGroupByOutputType>[]
          }
          count: {
            args: Prisma.HubCountArgs<ExtArgs>,
            result: $Utils.Optional<HubCountAggregateOutputType> | number
          }
        }
      }
      Path: {
        payload: Prisma.$PathPayload<ExtArgs>
        fields: Prisma.PathFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PathFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PathFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          findFirst: {
            args: Prisma.PathFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PathFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          findMany: {
            args: Prisma.PathFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>[]
          }
          create: {
            args: Prisma.PathCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          createMany: {
            args: Prisma.PathCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PathDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          update: {
            args: Prisma.PathUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          deleteMany: {
            args: Prisma.PathDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PathUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PathUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PathPayload>
          }
          aggregate: {
            args: Prisma.PathAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePath>
          }
          groupBy: {
            args: Prisma.PathGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PathGroupByOutputType>[]
          }
          count: {
            args: Prisma.PathCountArgs<ExtArgs>,
            result: $Utils.Optional<PathCountAggregateOutputType> | number
          }
        }
      }
      Need: {
        payload: Prisma.$NeedPayload<ExtArgs>
        fields: Prisma.NeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NeedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NeedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          findFirst: {
            args: Prisma.NeedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NeedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          findMany: {
            args: Prisma.NeedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>[]
          }
          create: {
            args: Prisma.NeedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          createMany: {
            args: Prisma.NeedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NeedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          update: {
            args: Prisma.NeedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          deleteMany: {
            args: Prisma.NeedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NeedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NeedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NeedPayload>
          }
          aggregate: {
            args: Prisma.NeedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNeed>
          }
          groupBy: {
            args: Prisma.NeedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.NeedCountArgs<ExtArgs>,
            result: $Utils.Optional<NeedCountAggregateOutputType> | number
          }
        }
      }
      Shipment: {
        payload: Prisma.$ShipmentPayload<ExtArgs>
        fields: Prisma.ShipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShipmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShipmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          findFirst: {
            args: Prisma.ShipmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShipmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          findMany: {
            args: Prisma.ShipmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>[]
          }
          create: {
            args: Prisma.ShipmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          createMany: {
            args: Prisma.ShipmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ShipmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          update: {
            args: Prisma.ShipmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          deleteMany: {
            args: Prisma.ShipmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ShipmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ShipmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          aggregate: {
            args: Prisma.ShipmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShipment>
          }
          groupBy: {
            args: Prisma.ShipmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShipmentCountArgs<ExtArgs>,
            result: $Utils.Optional<ShipmentCountAggregateOutputType> | number
          }
        }
      }
      Good: {
        payload: Prisma.$GoodPayload<ExtArgs>
        fields: Prisma.GoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          findFirst: {
            args: Prisma.GoodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          findMany: {
            args: Prisma.GoodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>[]
          }
          create: {
            args: Prisma.GoodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          createMany: {
            args: Prisma.GoodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GoodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          update: {
            args: Prisma.GoodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          deleteMany: {
            args: Prisma.GoodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GoodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GoodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          aggregate: {
            args: Prisma.GoodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGood>
          }
          groupBy: {
            args: Prisma.GoodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoodCountArgs<ExtArgs>,
            result: $Utils.Optional<GoodCountAggregateOutputType> | number
          }
        }
      }
      HubStop: {
        payload: Prisma.$HubStopPayload<ExtArgs>
        fields: Prisma.HubStopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HubStopFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HubStopFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          findFirst: {
            args: Prisma.HubStopFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HubStopFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          findMany: {
            args: Prisma.HubStopFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>[]
          }
          create: {
            args: Prisma.HubStopCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          createMany: {
            args: Prisma.HubStopCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HubStopDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          update: {
            args: Prisma.HubStopUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          deleteMany: {
            args: Prisma.HubStopDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HubStopUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HubStopUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HubStopPayload>
          }
          aggregate: {
            args: Prisma.HubStopAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHubStop>
          }
          groupBy: {
            args: Prisma.HubStopGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HubStopGroupByOutputType>[]
          }
          count: {
            args: Prisma.HubStopCountArgs<ExtArgs>,
            result: $Utils.Optional<HubStopCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    hubs: number
    paths: number
    shipments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hubs?: boolean | UserCountOutputTypeCountHubsArgs
    paths?: boolean | UserCountOutputTypeCountPathsArgs
    shipments?: boolean | UserCountOutputTypeCountShipmentsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HubWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPathsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentWhereInput
  }



  /**
   * Count Type HubCountOutputType
   */

  export type HubCountOutputType = {
    hubstops: number
  }

  export type HubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hubstops?: boolean | HubCountOutputTypeCountHubstopsArgs
  }

  // Custom InputTypes

  /**
   * HubCountOutputType without action
   */
  export type HubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubCountOutputType
     */
    select?: HubCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HubCountOutputType without action
   */
  export type HubCountOutputTypeCountHubstopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HubStopWhereInput
  }



  /**
   * Count Type PathCountOutputType
   */

  export type PathCountOutputType = {
    hubstops: number
    needs: number
  }

  export type PathCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hubstops?: boolean | PathCountOutputTypeCountHubstopsArgs
    needs?: boolean | PathCountOutputTypeCountNeedsArgs
  }

  // Custom InputTypes

  /**
   * PathCountOutputType without action
   */
  export type PathCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PathCountOutputType
     */
    select?: PathCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PathCountOutputType without action
   */
  export type PathCountOutputTypeCountHubstopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HubStopWhereInput
  }


  /**
   * PathCountOutputType without action
   */
  export type PathCountOutputTypeCountNeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeedWhereInput
  }



  /**
   * Count Type NeedCountOutputType
   */

  export type NeedCountOutputType = {
    goods: number
  }

  export type NeedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goods?: boolean | NeedCountOutputTypeCountGoodsArgs
  }

  // Custom InputTypes

  /**
   * NeedCountOutputType without action
   */
  export type NeedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeedCountOutputType
     */
    select?: NeedCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NeedCountOutputType without action
   */
  export type NeedCountOutputTypeCountGoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoodWhereInput
  }



  /**
   * Count Type ShipmentCountOutputType
   */

  export type ShipmentCountOutputType = {
    goods: number
  }

  export type ShipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goods?: boolean | ShipmentCountOutputTypeCountGoodsArgs
  }

  // Custom InputTypes

  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentCountOutputType
     */
    select?: ShipmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeCountGoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoodWhereInput
  }



  /**
   * Count Type HubStopCountOutputType
   */

  export type HubStopCountOutputType = {
    shipments: number
  }

  export type HubStopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shipments?: boolean | HubStopCountOutputTypeCountShipmentsArgs
  }

  // Custom InputTypes

  /**
   * HubStopCountOutputType without action
   */
  export type HubStopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStopCountOutputType
     */
    select?: HubStopCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HubStopCountOutputType without action
   */
  export type HubStopCountOutputTypeCountShipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    surname: string | null
    email: string | null
    phone: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    surname: string | null
    email: string | null
    phone: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    surname: number
    email: number
    phone: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    phone?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    role?: boolean
    hubs?: boolean | User$hubsArgs<ExtArgs>
    paths?: boolean | User$pathsArgs<ExtArgs>
    shipments?: boolean | User$shipmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hubs?: boolean | User$hubsArgs<ExtArgs>
    paths?: boolean | User$pathsArgs<ExtArgs>
    shipments?: boolean | User$shipmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      hubs: Prisma.$HubPayload<ExtArgs>[]
      paths: Prisma.$PathPayload<ExtArgs>[]
      shipments: Prisma.$ShipmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      surname: string
      email: string
      phone: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hubs<T extends User$hubsArgs<ExtArgs> = {}>(args?: Subset<T, User$hubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findMany'> | Null>;

    paths<T extends User$pathsArgs<ExtArgs> = {}>(args?: Subset<T, User$pathsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findMany'> | Null>;

    shipments<T extends User$shipmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$shipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.hubs
   */
  export type User$hubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    where?: HubWhereInput
    orderBy?: HubOrderByWithRelationInput | HubOrderByWithRelationInput[]
    cursor?: HubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HubScalarFieldEnum | HubScalarFieldEnum[]
  }


  /**
   * User.paths
   */
  export type User$pathsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    where?: PathWhereInput
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    cursor?: PathWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }


  /**
   * User.shipments
   */
  export type User$shipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    where?: ShipmentWhereInput
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    cursor?: ShipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Hub
   */

  export type AggregateHub = {
    _count: HubCountAggregateOutputType | null
    _avg: HubAvgAggregateOutputType | null
    _sum: HubSumAggregateOutputType | null
    _min: HubMinAggregateOutputType | null
    _max: HubMaxAggregateOutputType | null
  }

  export type HubAvgAggregateOutputType = {
    id: number | null
    startHour: number | null
    endHour: number | null
    adminId: number | null
  }

  export type HubSumAggregateOutputType = {
    id: number | null
    startHour: number | null
    endHour: number | null
    adminId: number | null
  }

  export type HubMinAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    region: string | null
    phone: string | null
    startHour: number | null
    endHour: number | null
    status: string | null
    photoUrl: string | null
    address: string | null
    adminId: number | null
  }

  export type HubMaxAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    region: string | null
    phone: string | null
    startHour: number | null
    endHour: number | null
    status: string | null
    photoUrl: string | null
    address: string | null
    adminId: number | null
  }

  export type HubCountAggregateOutputType = {
    id: number
    name: number
    city: number
    region: number
    phone: number
    startHour: number
    endHour: number
    status: number
    photoUrl: number
    address: number
    adminId: number
    _all: number
  }


  export type HubAvgAggregateInputType = {
    id?: true
    startHour?: true
    endHour?: true
    adminId?: true
  }

  export type HubSumAggregateInputType = {
    id?: true
    startHour?: true
    endHour?: true
    adminId?: true
  }

  export type HubMinAggregateInputType = {
    id?: true
    name?: true
    city?: true
    region?: true
    phone?: true
    startHour?: true
    endHour?: true
    status?: true
    photoUrl?: true
    address?: true
    adminId?: true
  }

  export type HubMaxAggregateInputType = {
    id?: true
    name?: true
    city?: true
    region?: true
    phone?: true
    startHour?: true
    endHour?: true
    status?: true
    photoUrl?: true
    address?: true
    adminId?: true
  }

  export type HubCountAggregateInputType = {
    id?: true
    name?: true
    city?: true
    region?: true
    phone?: true
    startHour?: true
    endHour?: true
    status?: true
    photoUrl?: true
    address?: true
    adminId?: true
    _all?: true
  }

  export type HubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hub to aggregate.
     */
    where?: HubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hubs to fetch.
     */
    orderBy?: HubOrderByWithRelationInput | HubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hubs
    **/
    _count?: true | HubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HubAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HubSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HubMaxAggregateInputType
  }

  export type GetHubAggregateType<T extends HubAggregateArgs> = {
        [P in keyof T & keyof AggregateHub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHub[P]>
      : GetScalarType<T[P], AggregateHub[P]>
  }




  export type HubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HubWhereInput
    orderBy?: HubOrderByWithAggregationInput | HubOrderByWithAggregationInput[]
    by: HubScalarFieldEnum[] | HubScalarFieldEnum
    having?: HubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HubCountAggregateInputType | true
    _avg?: HubAvgAggregateInputType
    _sum?: HubSumAggregateInputType
    _min?: HubMinAggregateInputType
    _max?: HubMaxAggregateInputType
  }

  export type HubGroupByOutputType = {
    id: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status: string
    photoUrl: string | null
    address: string
    adminId: number
    _count: HubCountAggregateOutputType | null
    _avg: HubAvgAggregateOutputType | null
    _sum: HubSumAggregateOutputType | null
    _min: HubMinAggregateOutputType | null
    _max: HubMaxAggregateOutputType | null
  }

  type GetHubGroupByPayload<T extends HubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HubGroupByOutputType[P]>
            : GetScalarType<T[P], HubGroupByOutputType[P]>
        }
      >
    >


  export type HubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    city?: boolean
    region?: boolean
    phone?: boolean
    startHour?: boolean
    endHour?: boolean
    status?: boolean
    photoUrl?: boolean
    address?: boolean
    adminId?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    hubstops?: boolean | Hub$hubstopsArgs<ExtArgs>
    _count?: boolean | HubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hub"]>

  export type HubSelectScalar = {
    id?: boolean
    name?: boolean
    city?: boolean
    region?: boolean
    phone?: boolean
    startHour?: boolean
    endHour?: boolean
    status?: boolean
    photoUrl?: boolean
    address?: boolean
    adminId?: boolean
  }

  export type HubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    hubstops?: boolean | Hub$hubstopsArgs<ExtArgs>
    _count?: boolean | HubCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hub"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      hubstops: Prisma.$HubStopPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      city: string
      region: string
      phone: string
      startHour: number
      endHour: number
      status: string
      photoUrl: string | null
      address: string
      adminId: number
    }, ExtArgs["result"]["hub"]>
    composites: {}
  }


  type HubGetPayload<S extends boolean | null | undefined | HubDefaultArgs> = $Result.GetResult<Prisma.$HubPayload, S>

  type HubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HubFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HubCountAggregateInputType | true
    }

  export interface HubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hub'], meta: { name: 'Hub' } }
    /**
     * Find zero or one Hub that matches the filter.
     * @param {HubFindUniqueArgs} args - Arguments to find a Hub
     * @example
     * // Get one Hub
     * const hub = await prisma.hub.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HubFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HubFindUniqueArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Hub that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HubFindUniqueOrThrowArgs} args - Arguments to find a Hub
     * @example
     * // Get one Hub
     * const hub = await prisma.hub.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HubFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HubFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Hub that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubFindFirstArgs} args - Arguments to find a Hub
     * @example
     * // Get one Hub
     * const hub = await prisma.hub.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HubFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HubFindFirstArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Hub that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubFindFirstOrThrowArgs} args - Arguments to find a Hub
     * @example
     * // Get one Hub
     * const hub = await prisma.hub.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HubFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HubFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Hubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hubs
     * const hubs = await prisma.hub.findMany()
     * 
     * // Get first 10 Hubs
     * const hubs = await prisma.hub.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hubWithIdOnly = await prisma.hub.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HubFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Hub.
     * @param {HubCreateArgs} args - Arguments to create a Hub.
     * @example
     * // Create one Hub
     * const Hub = await prisma.hub.create({
     *   data: {
     *     // ... data to create a Hub
     *   }
     * })
     * 
    **/
    create<T extends HubCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HubCreateArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Hubs.
     *     @param {HubCreateManyArgs} args - Arguments to create many Hubs.
     *     @example
     *     // Create many Hubs
     *     const hub = await prisma.hub.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HubCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hub.
     * @param {HubDeleteArgs} args - Arguments to delete one Hub.
     * @example
     * // Delete one Hub
     * const Hub = await prisma.hub.delete({
     *   where: {
     *     // ... filter to delete one Hub
     *   }
     * })
     * 
    **/
    delete<T extends HubDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HubDeleteArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Hub.
     * @param {HubUpdateArgs} args - Arguments to update one Hub.
     * @example
     * // Update one Hub
     * const hub = await prisma.hub.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HubUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HubUpdateArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Hubs.
     * @param {HubDeleteManyArgs} args - Arguments to filter Hubs to delete.
     * @example
     * // Delete a few Hubs
     * const { count } = await prisma.hub.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HubDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hubs
     * const hub = await prisma.hub.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HubUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HubUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hub.
     * @param {HubUpsertArgs} args - Arguments to update or create a Hub.
     * @example
     * // Update or create a Hub
     * const hub = await prisma.hub.upsert({
     *   create: {
     *     // ... data to create a Hub
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hub we want to update
     *   }
     * })
    **/
    upsert<T extends HubUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HubUpsertArgs<ExtArgs>>
    ): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Hubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubCountArgs} args - Arguments to filter Hubs to count.
     * @example
     * // Count the number of Hubs
     * const count = await prisma.hub.count({
     *   where: {
     *     // ... the filter for the Hubs we want to count
     *   }
     * })
    **/
    count<T extends HubCountArgs>(
      args?: Subset<T, HubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HubAggregateArgs>(args: Subset<T, HubAggregateArgs>): Prisma.PrismaPromise<GetHubAggregateType<T>>

    /**
     * Group by Hub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HubGroupByArgs['orderBy'] }
        : { orderBy?: HubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hub model
   */
  readonly fields: HubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hub.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    hubstops<T extends Hub$hubstopsArgs<ExtArgs> = {}>(args?: Subset<T, Hub$hubstopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Hub model
   */ 
  interface HubFieldRefs {
    readonly id: FieldRef<"Hub", 'Int'>
    readonly name: FieldRef<"Hub", 'String'>
    readonly city: FieldRef<"Hub", 'String'>
    readonly region: FieldRef<"Hub", 'String'>
    readonly phone: FieldRef<"Hub", 'String'>
    readonly startHour: FieldRef<"Hub", 'Int'>
    readonly endHour: FieldRef<"Hub", 'Int'>
    readonly status: FieldRef<"Hub", 'String'>
    readonly photoUrl: FieldRef<"Hub", 'String'>
    readonly address: FieldRef<"Hub", 'String'>
    readonly adminId: FieldRef<"Hub", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Hub findUnique
   */
  export type HubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter, which Hub to fetch.
     */
    where: HubWhereUniqueInput
  }


  /**
   * Hub findUniqueOrThrow
   */
  export type HubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter, which Hub to fetch.
     */
    where: HubWhereUniqueInput
  }


  /**
   * Hub findFirst
   */
  export type HubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter, which Hub to fetch.
     */
    where?: HubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hubs to fetch.
     */
    orderBy?: HubOrderByWithRelationInput | HubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hubs.
     */
    cursor?: HubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hubs.
     */
    distinct?: HubScalarFieldEnum | HubScalarFieldEnum[]
  }


  /**
   * Hub findFirstOrThrow
   */
  export type HubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter, which Hub to fetch.
     */
    where?: HubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hubs to fetch.
     */
    orderBy?: HubOrderByWithRelationInput | HubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hubs.
     */
    cursor?: HubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hubs.
     */
    distinct?: HubScalarFieldEnum | HubScalarFieldEnum[]
  }


  /**
   * Hub findMany
   */
  export type HubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter, which Hubs to fetch.
     */
    where?: HubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hubs to fetch.
     */
    orderBy?: HubOrderByWithRelationInput | HubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hubs.
     */
    cursor?: HubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hubs.
     */
    skip?: number
    distinct?: HubScalarFieldEnum | HubScalarFieldEnum[]
  }


  /**
   * Hub create
   */
  export type HubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * The data needed to create a Hub.
     */
    data: XOR<HubCreateInput, HubUncheckedCreateInput>
  }


  /**
   * Hub createMany
   */
  export type HubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hubs.
     */
    data: HubCreateManyInput | HubCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Hub update
   */
  export type HubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * The data needed to update a Hub.
     */
    data: XOR<HubUpdateInput, HubUncheckedUpdateInput>
    /**
     * Choose, which Hub to update.
     */
    where: HubWhereUniqueInput
  }


  /**
   * Hub updateMany
   */
  export type HubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hubs.
     */
    data: XOR<HubUpdateManyMutationInput, HubUncheckedUpdateManyInput>
    /**
     * Filter which Hubs to update
     */
    where?: HubWhereInput
  }


  /**
   * Hub upsert
   */
  export type HubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * The filter to search for the Hub to update in case it exists.
     */
    where: HubWhereUniqueInput
    /**
     * In case the Hub found by the `where` argument doesn't exist, create a new Hub with this data.
     */
    create: XOR<HubCreateInput, HubUncheckedCreateInput>
    /**
     * In case the Hub was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HubUpdateInput, HubUncheckedUpdateInput>
  }


  /**
   * Hub delete
   */
  export type HubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
    /**
     * Filter which Hub to delete.
     */
    where: HubWhereUniqueInput
  }


  /**
   * Hub deleteMany
   */
  export type HubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hubs to delete
     */
    where?: HubWhereInput
  }


  /**
   * Hub.hubstops
   */
  export type Hub$hubstopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    where?: HubStopWhereInput
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    cursor?: HubStopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HubStopScalarFieldEnum | HubStopScalarFieldEnum[]
  }


  /**
   * Hub without action
   */
  export type HubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hub
     */
    select?: HubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubInclude<ExtArgs> | null
  }



  /**
   * Model Path
   */

  export type AggregatePath = {
    _count: PathCountAggregateOutputType | null
    _avg: PathAvgAggregateOutputType | null
    _sum: PathSumAggregateOutputType | null
    _min: PathMinAggregateOutputType | null
    _max: PathMaxAggregateOutputType | null
  }

  export type PathAvgAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type PathSumAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type PathMinAggregateOutputType = {
    id: number | null
    startTime: Date | null
    destination: string | null
    notes: string | null
    driverId: number | null
  }

  export type PathMaxAggregateOutputType = {
    id: number | null
    startTime: Date | null
    destination: string | null
    notes: string | null
    driverId: number | null
  }

  export type PathCountAggregateOutputType = {
    id: number
    startTime: number
    destination: number
    stops: number
    notes: number
    driverId: number
    _all: number
  }


  export type PathAvgAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type PathSumAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type PathMinAggregateInputType = {
    id?: true
    startTime?: true
    destination?: true
    notes?: true
    driverId?: true
  }

  export type PathMaxAggregateInputType = {
    id?: true
    startTime?: true
    destination?: true
    notes?: true
    driverId?: true
  }

  export type PathCountAggregateInputType = {
    id?: true
    startTime?: true
    destination?: true
    stops?: true
    notes?: true
    driverId?: true
    _all?: true
  }

  export type PathAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Path to aggregate.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paths
    **/
    _count?: true | PathCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PathAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PathSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PathMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PathMaxAggregateInputType
  }

  export type GetPathAggregateType<T extends PathAggregateArgs> = {
        [P in keyof T & keyof AggregatePath]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePath[P]>
      : GetScalarType<T[P], AggregatePath[P]>
  }




  export type PathGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PathWhereInput
    orderBy?: PathOrderByWithAggregationInput | PathOrderByWithAggregationInput[]
    by: PathScalarFieldEnum[] | PathScalarFieldEnum
    having?: PathScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PathCountAggregateInputType | true
    _avg?: PathAvgAggregateInputType
    _sum?: PathSumAggregateInputType
    _min?: PathMinAggregateInputType
    _max?: PathMaxAggregateInputType
  }

  export type PathGroupByOutputType = {
    id: number
    startTime: Date
    destination: string
    stops: string[]
    notes: string | null
    driverId: number
    _count: PathCountAggregateOutputType | null
    _avg: PathAvgAggregateOutputType | null
    _sum: PathSumAggregateOutputType | null
    _min: PathMinAggregateOutputType | null
    _max: PathMaxAggregateOutputType | null
  }

  type GetPathGroupByPayload<T extends PathGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PathGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PathGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PathGroupByOutputType[P]>
            : GetScalarType<T[P], PathGroupByOutputType[P]>
        }
      >
    >


  export type PathSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    destination?: boolean
    stops?: boolean
    notes?: boolean
    driverId?: boolean
    hubstops?: boolean | Path$hubstopsArgs<ExtArgs>
    needs?: boolean | Path$needsArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PathCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["path"]>

  export type PathSelectScalar = {
    id?: boolean
    startTime?: boolean
    destination?: boolean
    stops?: boolean
    notes?: boolean
    driverId?: boolean
  }

  export type PathInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hubstops?: boolean | Path$hubstopsArgs<ExtArgs>
    needs?: boolean | Path$needsArgs<ExtArgs>
    driver?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PathCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PathPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Path"
    objects: {
      hubstops: Prisma.$HubStopPayload<ExtArgs>[]
      needs: Prisma.$NeedPayload<ExtArgs>[]
      driver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      startTime: Date
      destination: string
      stops: string[]
      notes: string | null
      driverId: number
    }, ExtArgs["result"]["path"]>
    composites: {}
  }


  type PathGetPayload<S extends boolean | null | undefined | PathDefaultArgs> = $Result.GetResult<Prisma.$PathPayload, S>

  type PathCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PathFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PathCountAggregateInputType | true
    }

  export interface PathDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Path'], meta: { name: 'Path' } }
    /**
     * Find zero or one Path that matches the filter.
     * @param {PathFindUniqueArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PathFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PathFindUniqueArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Path that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PathFindUniqueOrThrowArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PathFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PathFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Path that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindFirstArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PathFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PathFindFirstArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Path that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindFirstOrThrowArgs} args - Arguments to find a Path
     * @example
     * // Get one Path
     * const path = await prisma.path.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PathFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PathFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Paths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paths
     * const paths = await prisma.path.findMany()
     * 
     * // Get first 10 Paths
     * const paths = await prisma.path.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pathWithIdOnly = await prisma.path.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PathFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PathFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Path.
     * @param {PathCreateArgs} args - Arguments to create a Path.
     * @example
     * // Create one Path
     * const Path = await prisma.path.create({
     *   data: {
     *     // ... data to create a Path
     *   }
     * })
     * 
    **/
    create<T extends PathCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PathCreateArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Paths.
     *     @param {PathCreateManyArgs} args - Arguments to create many Paths.
     *     @example
     *     // Create many Paths
     *     const path = await prisma.path.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PathCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PathCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Path.
     * @param {PathDeleteArgs} args - Arguments to delete one Path.
     * @example
     * // Delete one Path
     * const Path = await prisma.path.delete({
     *   where: {
     *     // ... filter to delete one Path
     *   }
     * })
     * 
    **/
    delete<T extends PathDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PathDeleteArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Path.
     * @param {PathUpdateArgs} args - Arguments to update one Path.
     * @example
     * // Update one Path
     * const path = await prisma.path.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PathUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PathUpdateArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Paths.
     * @param {PathDeleteManyArgs} args - Arguments to filter Paths to delete.
     * @example
     * // Delete a few Paths
     * const { count } = await prisma.path.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PathDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PathDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paths
     * const path = await prisma.path.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PathUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PathUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Path.
     * @param {PathUpsertArgs} args - Arguments to update or create a Path.
     * @example
     * // Update or create a Path
     * const path = await prisma.path.upsert({
     *   create: {
     *     // ... data to create a Path
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Path we want to update
     *   }
     * })
    **/
    upsert<T extends PathUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PathUpsertArgs<ExtArgs>>
    ): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Paths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathCountArgs} args - Arguments to filter Paths to count.
     * @example
     * // Count the number of Paths
     * const count = await prisma.path.count({
     *   where: {
     *     // ... the filter for the Paths we want to count
     *   }
     * })
    **/
    count<T extends PathCountArgs>(
      args?: Subset<T, PathCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PathCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Path.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PathAggregateArgs>(args: Subset<T, PathAggregateArgs>): Prisma.PrismaPromise<GetPathAggregateType<T>>

    /**
     * Group by Path.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PathGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PathGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PathGroupByArgs['orderBy'] }
        : { orderBy?: PathGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PathGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPathGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Path model
   */
  readonly fields: PathFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Path.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PathClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hubstops<T extends Path$hubstopsArgs<ExtArgs> = {}>(args?: Subset<T, Path$hubstopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findMany'> | Null>;

    needs<T extends Path$needsArgs<ExtArgs> = {}>(args?: Subset<T, Path$needsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findMany'> | Null>;

    driver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Path model
   */ 
  interface PathFieldRefs {
    readonly id: FieldRef<"Path", 'Int'>
    readonly startTime: FieldRef<"Path", 'DateTime'>
    readonly destination: FieldRef<"Path", 'String'>
    readonly stops: FieldRef<"Path", 'String[]'>
    readonly notes: FieldRef<"Path", 'String'>
    readonly driverId: FieldRef<"Path", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Path findUnique
   */
  export type PathFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where: PathWhereUniqueInput
  }


  /**
   * Path findUniqueOrThrow
   */
  export type PathFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where: PathWhereUniqueInput
  }


  /**
   * Path findFirst
   */
  export type PathFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paths.
     */
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }


  /**
   * Path findFirstOrThrow
   */
  export type PathFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Path to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paths.
     */
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }


  /**
   * Path findMany
   */
  export type PathFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter, which Paths to fetch.
     */
    where?: PathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paths to fetch.
     */
    orderBy?: PathOrderByWithRelationInput | PathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paths.
     */
    cursor?: PathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paths.
     */
    skip?: number
    distinct?: PathScalarFieldEnum | PathScalarFieldEnum[]
  }


  /**
   * Path create
   */
  export type PathCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The data needed to create a Path.
     */
    data: XOR<PathCreateInput, PathUncheckedCreateInput>
  }


  /**
   * Path createMany
   */
  export type PathCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paths.
     */
    data: PathCreateManyInput | PathCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Path update
   */
  export type PathUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The data needed to update a Path.
     */
    data: XOR<PathUpdateInput, PathUncheckedUpdateInput>
    /**
     * Choose, which Path to update.
     */
    where: PathWhereUniqueInput
  }


  /**
   * Path updateMany
   */
  export type PathUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paths.
     */
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyInput>
    /**
     * Filter which Paths to update
     */
    where?: PathWhereInput
  }


  /**
   * Path upsert
   */
  export type PathUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * The filter to search for the Path to update in case it exists.
     */
    where: PathWhereUniqueInput
    /**
     * In case the Path found by the `where` argument doesn't exist, create a new Path with this data.
     */
    create: XOR<PathCreateInput, PathUncheckedCreateInput>
    /**
     * In case the Path was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PathUpdateInput, PathUncheckedUpdateInput>
  }


  /**
   * Path delete
   */
  export type PathDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
    /**
     * Filter which Path to delete.
     */
    where: PathWhereUniqueInput
  }


  /**
   * Path deleteMany
   */
  export type PathDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paths to delete
     */
    where?: PathWhereInput
  }


  /**
   * Path.hubstops
   */
  export type Path$hubstopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    where?: HubStopWhereInput
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    cursor?: HubStopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HubStopScalarFieldEnum | HubStopScalarFieldEnum[]
  }


  /**
   * Path.needs
   */
  export type Path$needsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    where?: NeedWhereInput
    orderBy?: NeedOrderByWithRelationInput | NeedOrderByWithRelationInput[]
    cursor?: NeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeedScalarFieldEnum | NeedScalarFieldEnum[]
  }


  /**
   * Path without action
   */
  export type PathDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Path
     */
    select?: PathSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PathInclude<ExtArgs> | null
  }



  /**
   * Model Need
   */

  export type AggregateNeed = {
    _count: NeedCountAggregateOutputType | null
    _avg: NeedAvgAggregateOutputType | null
    _sum: NeedSumAggregateOutputType | null
    _min: NeedMinAggregateOutputType | null
    _max: NeedMaxAggregateOutputType | null
  }

  export type NeedAvgAggregateOutputType = {
    id: number | null
    pathId: number | null
  }

  export type NeedSumAggregateOutputType = {
    id: number | null
    pathId: number | null
  }

  export type NeedMinAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    type: $Enums.Aid_Type | null
    pathId: number | null
  }

  export type NeedMaxAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    type: $Enums.Aid_Type | null
    pathId: number | null
  }

  export type NeedCountAggregateOutputType = {
    id: number
    name: number
    status: number
    type: number
    pathId: number
    _all: number
  }


  export type NeedAvgAggregateInputType = {
    id?: true
    pathId?: true
  }

  export type NeedSumAggregateInputType = {
    id?: true
    pathId?: true
  }

  export type NeedMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    pathId?: true
  }

  export type NeedMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    pathId?: true
  }

  export type NeedCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    pathId?: true
    _all?: true
  }

  export type NeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Need to aggregate.
     */
    where?: NeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Needs to fetch.
     */
    orderBy?: NeedOrderByWithRelationInput | NeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Needs
    **/
    _count?: true | NeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NeedMaxAggregateInputType
  }

  export type GetNeedAggregateType<T extends NeedAggregateArgs> = {
        [P in keyof T & keyof AggregateNeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNeed[P]>
      : GetScalarType<T[P], AggregateNeed[P]>
  }




  export type NeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeedWhereInput
    orderBy?: NeedOrderByWithAggregationInput | NeedOrderByWithAggregationInput[]
    by: NeedScalarFieldEnum[] | NeedScalarFieldEnum
    having?: NeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NeedCountAggregateInputType | true
    _avg?: NeedAvgAggregateInputType
    _sum?: NeedSumAggregateInputType
    _min?: NeedMinAggregateInputType
    _max?: NeedMaxAggregateInputType
  }

  export type NeedGroupByOutputType = {
    id: number
    name: string
    status: string
    type: $Enums.Aid_Type
    pathId: number
    _count: NeedCountAggregateOutputType | null
    _avg: NeedAvgAggregateOutputType | null
    _sum: NeedSumAggregateOutputType | null
    _min: NeedMinAggregateOutputType | null
    _max: NeedMaxAggregateOutputType | null
  }

  type GetNeedGroupByPayload<T extends NeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NeedGroupByOutputType[P]>
            : GetScalarType<T[P], NeedGroupByOutputType[P]>
        }
      >
    >


  export type NeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    pathId?: boolean
    goods?: boolean | Need$goodsArgs<ExtArgs>
    path?: boolean | PathDefaultArgs<ExtArgs>
    _count?: boolean | NeedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["need"]>

  export type NeedSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    pathId?: boolean
  }

  export type NeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goods?: boolean | Need$goodsArgs<ExtArgs>
    path?: boolean | PathDefaultArgs<ExtArgs>
    _count?: boolean | NeedCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Need"
    objects: {
      goods: Prisma.$GoodPayload<ExtArgs>[]
      path: Prisma.$PathPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      status: string
      type: $Enums.Aid_Type
      pathId: number
    }, ExtArgs["result"]["need"]>
    composites: {}
  }


  type NeedGetPayload<S extends boolean | null | undefined | NeedDefaultArgs> = $Result.GetResult<Prisma.$NeedPayload, S>

  type NeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NeedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NeedCountAggregateInputType | true
    }

  export interface NeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Need'], meta: { name: 'Need' } }
    /**
     * Find zero or one Need that matches the filter.
     * @param {NeedFindUniqueArgs} args - Arguments to find a Need
     * @example
     * // Get one Need
     * const need = await prisma.need.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NeedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NeedFindUniqueArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Need that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NeedFindUniqueOrThrowArgs} args - Arguments to find a Need
     * @example
     * // Get one Need
     * const need = await prisma.need.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NeedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Need that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedFindFirstArgs} args - Arguments to find a Need
     * @example
     * // Get one Need
     * const need = await prisma.need.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NeedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedFindFirstArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Need that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedFindFirstOrThrowArgs} args - Arguments to find a Need
     * @example
     * // Get one Need
     * const need = await prisma.need.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NeedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Needs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Needs
     * const needs = await prisma.need.findMany()
     * 
     * // Get first 10 Needs
     * const needs = await prisma.need.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const needWithIdOnly = await prisma.need.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NeedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Need.
     * @param {NeedCreateArgs} args - Arguments to create a Need.
     * @example
     * // Create one Need
     * const Need = await prisma.need.create({
     *   data: {
     *     // ... data to create a Need
     *   }
     * })
     * 
    **/
    create<T extends NeedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NeedCreateArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Needs.
     *     @param {NeedCreateManyArgs} args - Arguments to create many Needs.
     *     @example
     *     // Create many Needs
     *     const need = await prisma.need.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NeedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Need.
     * @param {NeedDeleteArgs} args - Arguments to delete one Need.
     * @example
     * // Delete one Need
     * const Need = await prisma.need.delete({
     *   where: {
     *     // ... filter to delete one Need
     *   }
     * })
     * 
    **/
    delete<T extends NeedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NeedDeleteArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Need.
     * @param {NeedUpdateArgs} args - Arguments to update one Need.
     * @example
     * // Update one Need
     * const need = await prisma.need.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NeedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NeedUpdateArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Needs.
     * @param {NeedDeleteManyArgs} args - Arguments to filter Needs to delete.
     * @example
     * // Delete a few Needs
     * const { count } = await prisma.need.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NeedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NeedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Needs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Needs
     * const need = await prisma.need.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NeedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NeedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Need.
     * @param {NeedUpsertArgs} args - Arguments to update or create a Need.
     * @example
     * // Update or create a Need
     * const need = await prisma.need.upsert({
     *   create: {
     *     // ... data to create a Need
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Need we want to update
     *   }
     * })
    **/
    upsert<T extends NeedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NeedUpsertArgs<ExtArgs>>
    ): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Needs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedCountArgs} args - Arguments to filter Needs to count.
     * @example
     * // Count the number of Needs
     * const count = await prisma.need.count({
     *   where: {
     *     // ... the filter for the Needs we want to count
     *   }
     * })
    **/
    count<T extends NeedCountArgs>(
      args?: Subset<T, NeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Need.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NeedAggregateArgs>(args: Subset<T, NeedAggregateArgs>): Prisma.PrismaPromise<GetNeedAggregateType<T>>

    /**
     * Group by Need.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NeedGroupByArgs['orderBy'] }
        : { orderBy?: NeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Need model
   */
  readonly fields: NeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Need.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    goods<T extends Need$goodsArgs<ExtArgs> = {}>(args?: Subset<T, Need$goodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findMany'> | Null>;

    path<T extends PathDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PathDefaultArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Need model
   */ 
  interface NeedFieldRefs {
    readonly id: FieldRef<"Need", 'Int'>
    readonly name: FieldRef<"Need", 'String'>
    readonly status: FieldRef<"Need", 'String'>
    readonly type: FieldRef<"Need", 'Aid_Type'>
    readonly pathId: FieldRef<"Need", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Need findUnique
   */
  export type NeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter, which Need to fetch.
     */
    where: NeedWhereUniqueInput
  }


  /**
   * Need findUniqueOrThrow
   */
  export type NeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter, which Need to fetch.
     */
    where: NeedWhereUniqueInput
  }


  /**
   * Need findFirst
   */
  export type NeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter, which Need to fetch.
     */
    where?: NeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Needs to fetch.
     */
    orderBy?: NeedOrderByWithRelationInput | NeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Needs.
     */
    cursor?: NeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Needs.
     */
    distinct?: NeedScalarFieldEnum | NeedScalarFieldEnum[]
  }


  /**
   * Need findFirstOrThrow
   */
  export type NeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter, which Need to fetch.
     */
    where?: NeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Needs to fetch.
     */
    orderBy?: NeedOrderByWithRelationInput | NeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Needs.
     */
    cursor?: NeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Needs.
     */
    distinct?: NeedScalarFieldEnum | NeedScalarFieldEnum[]
  }


  /**
   * Need findMany
   */
  export type NeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter, which Needs to fetch.
     */
    where?: NeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Needs to fetch.
     */
    orderBy?: NeedOrderByWithRelationInput | NeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Needs.
     */
    cursor?: NeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Needs.
     */
    skip?: number
    distinct?: NeedScalarFieldEnum | NeedScalarFieldEnum[]
  }


  /**
   * Need create
   */
  export type NeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * The data needed to create a Need.
     */
    data: XOR<NeedCreateInput, NeedUncheckedCreateInput>
  }


  /**
   * Need createMany
   */
  export type NeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Needs.
     */
    data: NeedCreateManyInput | NeedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Need update
   */
  export type NeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * The data needed to update a Need.
     */
    data: XOR<NeedUpdateInput, NeedUncheckedUpdateInput>
    /**
     * Choose, which Need to update.
     */
    where: NeedWhereUniqueInput
  }


  /**
   * Need updateMany
   */
  export type NeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Needs.
     */
    data: XOR<NeedUpdateManyMutationInput, NeedUncheckedUpdateManyInput>
    /**
     * Filter which Needs to update
     */
    where?: NeedWhereInput
  }


  /**
   * Need upsert
   */
  export type NeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * The filter to search for the Need to update in case it exists.
     */
    where: NeedWhereUniqueInput
    /**
     * In case the Need found by the `where` argument doesn't exist, create a new Need with this data.
     */
    create: XOR<NeedCreateInput, NeedUncheckedCreateInput>
    /**
     * In case the Need was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NeedUpdateInput, NeedUncheckedUpdateInput>
  }


  /**
   * Need delete
   */
  export type NeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    /**
     * Filter which Need to delete.
     */
    where: NeedWhereUniqueInput
  }


  /**
   * Need deleteMany
   */
  export type NeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Needs to delete
     */
    where?: NeedWhereInput
  }


  /**
   * Need.goods
   */
  export type Need$goodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    where?: GoodWhereInput
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    cursor?: GoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }


  /**
   * Need without action
   */
  export type NeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
  }



  /**
   * Model Shipment
   */

  export type AggregateShipment = {
    _count: ShipmentCountAggregateOutputType | null
    _avg: ShipmentAvgAggregateOutputType | null
    _sum: ShipmentSumAggregateOutputType | null
    _min: ShipmentMinAggregateOutputType | null
    _max: ShipmentMaxAggregateOutputType | null
  }

  export type ShipmentAvgAggregateOutputType = {
    id: number | null
    volunteerId: number | null
    hubstopId: number | null
  }

  export type ShipmentSumAggregateOutputType = {
    id: number | null
    volunteerId: number | null
    hubstopId: number | null
  }

  export type ShipmentMinAggregateOutputType = {
    id: number | null
    creationTime: Date | null
    confirmTime: Date | null
    notes: string | null
    status: string | null
    volunteerId: number | null
    hubstopId: number | null
  }

  export type ShipmentMaxAggregateOutputType = {
    id: number | null
    creationTime: Date | null
    confirmTime: Date | null
    notes: string | null
    status: string | null
    volunteerId: number | null
    hubstopId: number | null
  }

  export type ShipmentCountAggregateOutputType = {
    id: number
    creationTime: number
    confirmTime: number
    notes: number
    status: number
    volunteerId: number
    hubstopId: number
    _all: number
  }


  export type ShipmentAvgAggregateInputType = {
    id?: true
    volunteerId?: true
    hubstopId?: true
  }

  export type ShipmentSumAggregateInputType = {
    id?: true
    volunteerId?: true
    hubstopId?: true
  }

  export type ShipmentMinAggregateInputType = {
    id?: true
    creationTime?: true
    confirmTime?: true
    notes?: true
    status?: true
    volunteerId?: true
    hubstopId?: true
  }

  export type ShipmentMaxAggregateInputType = {
    id?: true
    creationTime?: true
    confirmTime?: true
    notes?: true
    status?: true
    volunteerId?: true
    hubstopId?: true
  }

  export type ShipmentCountAggregateInputType = {
    id?: true
    creationTime?: true
    confirmTime?: true
    notes?: true
    status?: true
    volunteerId?: true
    hubstopId?: true
    _all?: true
  }

  export type ShipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipment to aggregate.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shipments
    **/
    _count?: true | ShipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShipmentMaxAggregateInputType
  }

  export type GetShipmentAggregateType<T extends ShipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateShipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipment[P]>
      : GetScalarType<T[P], AggregateShipment[P]>
  }




  export type ShipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentWhereInput
    orderBy?: ShipmentOrderByWithAggregationInput | ShipmentOrderByWithAggregationInput[]
    by: ShipmentScalarFieldEnum[] | ShipmentScalarFieldEnum
    having?: ShipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShipmentCountAggregateInputType | true
    _avg?: ShipmentAvgAggregateInputType
    _sum?: ShipmentSumAggregateInputType
    _min?: ShipmentMinAggregateInputType
    _max?: ShipmentMaxAggregateInputType
  }

  export type ShipmentGroupByOutputType = {
    id: number
    creationTime: Date
    confirmTime: Date | null
    notes: string | null
    status: string
    volunteerId: number
    hubstopId: number
    _count: ShipmentCountAggregateOutputType | null
    _avg: ShipmentAvgAggregateOutputType | null
    _sum: ShipmentSumAggregateOutputType | null
    _min: ShipmentMinAggregateOutputType | null
    _max: ShipmentMaxAggregateOutputType | null
  }

  type GetShipmentGroupByPayload<T extends ShipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShipmentGroupByOutputType[P]>
            : GetScalarType<T[P], ShipmentGroupByOutputType[P]>
        }
      >
    >


  export type ShipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creationTime?: boolean
    confirmTime?: boolean
    notes?: boolean
    status?: boolean
    volunteerId?: boolean
    hubstopId?: boolean
    goods?: boolean | Shipment$goodsArgs<ExtArgs>
    hubstop?: boolean | HubStopDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ShipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipment"]>

  export type ShipmentSelectScalar = {
    id?: boolean
    creationTime?: boolean
    confirmTime?: boolean
    notes?: boolean
    status?: boolean
    volunteerId?: boolean
    hubstopId?: boolean
  }

  export type ShipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goods?: boolean | Shipment$goodsArgs<ExtArgs>
    hubstop?: boolean | HubStopDefaultArgs<ExtArgs>
    volunteer?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ShipmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ShipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shipment"
    objects: {
      goods: Prisma.$GoodPayload<ExtArgs>[]
      hubstop: Prisma.$HubStopPayload<ExtArgs>
      volunteer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      creationTime: Date
      confirmTime: Date | null
      notes: string | null
      status: string
      volunteerId: number
      hubstopId: number
    }, ExtArgs["result"]["shipment"]>
    composites: {}
  }


  type ShipmentGetPayload<S extends boolean | null | undefined | ShipmentDefaultArgs> = $Result.GetResult<Prisma.$ShipmentPayload, S>

  type ShipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShipmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShipmentCountAggregateInputType | true
    }

  export interface ShipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipment'], meta: { name: 'Shipment' } }
    /**
     * Find zero or one Shipment that matches the filter.
     * @param {ShipmentFindUniqueArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShipmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentFindUniqueArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shipment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShipmentFindUniqueOrThrowArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShipmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindFirstArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShipmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentFindFirstArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindFirstOrThrowArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShipmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shipments
     * const shipments = await prisma.shipment.findMany()
     * 
     * // Get first 10 Shipments
     * const shipments = await prisma.shipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipmentWithIdOnly = await prisma.shipment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShipmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shipment.
     * @param {ShipmentCreateArgs} args - Arguments to create a Shipment.
     * @example
     * // Create one Shipment
     * const Shipment = await prisma.shipment.create({
     *   data: {
     *     // ... data to create a Shipment
     *   }
     * })
     * 
    **/
    create<T extends ShipmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentCreateArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Shipments.
     *     @param {ShipmentCreateManyArgs} args - Arguments to create many Shipments.
     *     @example
     *     // Create many Shipments
     *     const shipment = await prisma.shipment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShipmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shipment.
     * @param {ShipmentDeleteArgs} args - Arguments to delete one Shipment.
     * @example
     * // Delete one Shipment
     * const Shipment = await prisma.shipment.delete({
     *   where: {
     *     // ... filter to delete one Shipment
     *   }
     * })
     * 
    **/
    delete<T extends ShipmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentDeleteArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shipment.
     * @param {ShipmentUpdateArgs} args - Arguments to update one Shipment.
     * @example
     * // Update one Shipment
     * const shipment = await prisma.shipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShipmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentUpdateArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shipments.
     * @param {ShipmentDeleteManyArgs} args - Arguments to filter Shipments to delete.
     * @example
     * // Delete a few Shipments
     * const { count } = await prisma.shipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShipmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShipmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shipments
     * const shipment = await prisma.shipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShipmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shipment.
     * @param {ShipmentUpsertArgs} args - Arguments to update or create a Shipment.
     * @example
     * // Update or create a Shipment
     * const shipment = await prisma.shipment.upsert({
     *   create: {
     *     // ... data to create a Shipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipment we want to update
     *   }
     * })
    **/
    upsert<T extends ShipmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ShipmentUpsertArgs<ExtArgs>>
    ): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentCountArgs} args - Arguments to filter Shipments to count.
     * @example
     * // Count the number of Shipments
     * const count = await prisma.shipment.count({
     *   where: {
     *     // ... the filter for the Shipments we want to count
     *   }
     * })
    **/
    count<T extends ShipmentCountArgs>(
      args?: Subset<T, ShipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShipmentAggregateArgs>(args: Subset<T, ShipmentAggregateArgs>): Prisma.PrismaPromise<GetShipmentAggregateType<T>>

    /**
     * Group by Shipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShipmentGroupByArgs['orderBy'] }
        : { orderBy?: ShipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shipment model
   */
  readonly fields: ShipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    goods<T extends Shipment$goodsArgs<ExtArgs> = {}>(args?: Subset<T, Shipment$goodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findMany'> | Null>;

    hubstop<T extends HubStopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HubStopDefaultArgs<ExtArgs>>): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    volunteer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Shipment model
   */ 
  interface ShipmentFieldRefs {
    readonly id: FieldRef<"Shipment", 'Int'>
    readonly creationTime: FieldRef<"Shipment", 'DateTime'>
    readonly confirmTime: FieldRef<"Shipment", 'DateTime'>
    readonly notes: FieldRef<"Shipment", 'String'>
    readonly status: FieldRef<"Shipment", 'String'>
    readonly volunteerId: FieldRef<"Shipment", 'Int'>
    readonly hubstopId: FieldRef<"Shipment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Shipment findUnique
   */
  export type ShipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where: ShipmentWhereUniqueInput
  }


  /**
   * Shipment findUniqueOrThrow
   */
  export type ShipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where: ShipmentWhereUniqueInput
  }


  /**
   * Shipment findFirst
   */
  export type ShipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipments.
     */
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }


  /**
   * Shipment findFirstOrThrow
   */
  export type ShipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipments.
     */
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }


  /**
   * Shipment findMany
   */
  export type ShipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipments to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }


  /**
   * Shipment create
   */
  export type ShipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Shipment.
     */
    data: XOR<ShipmentCreateInput, ShipmentUncheckedCreateInput>
  }


  /**
   * Shipment createMany
   */
  export type ShipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shipments.
     */
    data: ShipmentCreateManyInput | ShipmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Shipment update
   */
  export type ShipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Shipment.
     */
    data: XOR<ShipmentUpdateInput, ShipmentUncheckedUpdateInput>
    /**
     * Choose, which Shipment to update.
     */
    where: ShipmentWhereUniqueInput
  }


  /**
   * Shipment updateMany
   */
  export type ShipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shipments.
     */
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyInput>
    /**
     * Filter which Shipments to update
     */
    where?: ShipmentWhereInput
  }


  /**
   * Shipment upsert
   */
  export type ShipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Shipment to update in case it exists.
     */
    where: ShipmentWhereUniqueInput
    /**
     * In case the Shipment found by the `where` argument doesn't exist, create a new Shipment with this data.
     */
    create: XOR<ShipmentCreateInput, ShipmentUncheckedCreateInput>
    /**
     * In case the Shipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShipmentUpdateInput, ShipmentUncheckedUpdateInput>
  }


  /**
   * Shipment delete
   */
  export type ShipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter which Shipment to delete.
     */
    where: ShipmentWhereUniqueInput
  }


  /**
   * Shipment deleteMany
   */
  export type ShipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipments to delete
     */
    where?: ShipmentWhereInput
  }


  /**
   * Shipment.goods
   */
  export type Shipment$goodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    where?: GoodWhereInput
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    cursor?: GoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }


  /**
   * Shipment without action
   */
  export type ShipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
  }



  /**
   * Model Good
   */

  export type AggregateGood = {
    _count: GoodCountAggregateOutputType | null
    _avg: GoodAvgAggregateOutputType | null
    _sum: GoodSumAggregateOutputType | null
    _min: GoodMinAggregateOutputType | null
    _max: GoodMaxAggregateOutputType | null
  }

  export type GoodAvgAggregateOutputType = {
    id: number | null
    shipmentId: number | null
    needId: number | null
  }

  export type GoodSumAggregateOutputType = {
    id: number | null
    shipmentId: number | null
    needId: number | null
  }

  export type GoodMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.Aid_Type | null
    shipmentId: number | null
    needId: number | null
  }

  export type GoodMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.Aid_Type | null
    shipmentId: number | null
    needId: number | null
  }

  export type GoodCountAggregateOutputType = {
    id: number
    name: number
    type: number
    shipmentId: number
    needId: number
    _all: number
  }


  export type GoodAvgAggregateInputType = {
    id?: true
    shipmentId?: true
    needId?: true
  }

  export type GoodSumAggregateInputType = {
    id?: true
    shipmentId?: true
    needId?: true
  }

  export type GoodMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    shipmentId?: true
    needId?: true
  }

  export type GoodMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    shipmentId?: true
    needId?: true
  }

  export type GoodCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    shipmentId?: true
    needId?: true
    _all?: true
  }

  export type GoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Good to aggregate.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goods
    **/
    _count?: true | GoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoodMaxAggregateInputType
  }

  export type GetGoodAggregateType<T extends GoodAggregateArgs> = {
        [P in keyof T & keyof AggregateGood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGood[P]>
      : GetScalarType<T[P], AggregateGood[P]>
  }




  export type GoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoodWhereInput
    orderBy?: GoodOrderByWithAggregationInput | GoodOrderByWithAggregationInput[]
    by: GoodScalarFieldEnum[] | GoodScalarFieldEnum
    having?: GoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoodCountAggregateInputType | true
    _avg?: GoodAvgAggregateInputType
    _sum?: GoodSumAggregateInputType
    _min?: GoodMinAggregateInputType
    _max?: GoodMaxAggregateInputType
  }

  export type GoodGroupByOutputType = {
    id: number
    name: string
    type: $Enums.Aid_Type
    shipmentId: number
    needId: number | null
    _count: GoodCountAggregateOutputType | null
    _avg: GoodAvgAggregateOutputType | null
    _sum: GoodSumAggregateOutputType | null
    _min: GoodMinAggregateOutputType | null
    _max: GoodMaxAggregateOutputType | null
  }

  type GetGoodGroupByPayload<T extends GoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoodGroupByOutputType[P]>
            : GetScalarType<T[P], GoodGroupByOutputType[P]>
        }
      >
    >


  export type GoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    shipmentId?: boolean
    needId?: boolean
    need?: boolean | Good$needArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["good"]>

  export type GoodSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    shipmentId?: boolean
    needId?: boolean
  }

  export type GoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    need?: boolean | Good$needArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }


  export type $GoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Good"
    objects: {
      need: Prisma.$NeedPayload<ExtArgs> | null
      shipment: Prisma.$ShipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: $Enums.Aid_Type
      shipmentId: number
      needId: number | null
    }, ExtArgs["result"]["good"]>
    composites: {}
  }


  type GoodGetPayload<S extends boolean | null | undefined | GoodDefaultArgs> = $Result.GetResult<Prisma.$GoodPayload, S>

  type GoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoodCountAggregateInputType | true
    }

  export interface GoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Good'], meta: { name: 'Good' } }
    /**
     * Find zero or one Good that matches the filter.
     * @param {GoodFindUniqueArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GoodFindUniqueArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Good that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GoodFindUniqueOrThrowArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Good that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindFirstArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodFindFirstArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Good that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindFirstOrThrowArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Goods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goods
     * const goods = await prisma.good.findMany()
     * 
     * // Get first 10 Goods
     * const goods = await prisma.good.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goodWithIdOnly = await prisma.good.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Good.
     * @param {GoodCreateArgs} args - Arguments to create a Good.
     * @example
     * // Create one Good
     * const Good = await prisma.good.create({
     *   data: {
     *     // ... data to create a Good
     *   }
     * })
     * 
    **/
    create<T extends GoodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GoodCreateArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Goods.
     *     @param {GoodCreateManyArgs} args - Arguments to create many Goods.
     *     @example
     *     // Create many Goods
     *     const good = await prisma.good.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Good.
     * @param {GoodDeleteArgs} args - Arguments to delete one Good.
     * @example
     * // Delete one Good
     * const Good = await prisma.good.delete({
     *   where: {
     *     // ... filter to delete one Good
     *   }
     * })
     * 
    **/
    delete<T extends GoodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GoodDeleteArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Good.
     * @param {GoodUpdateArgs} args - Arguments to update one Good.
     * @example
     * // Update one Good
     * const good = await prisma.good.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GoodUpdateArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Goods.
     * @param {GoodDeleteManyArgs} args - Arguments to filter Goods to delete.
     * @example
     * // Delete a few Goods
     * const { count } = await prisma.good.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goods
     * const good = await prisma.good.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GoodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Good.
     * @param {GoodUpsertArgs} args - Arguments to update or create a Good.
     * @example
     * // Update or create a Good
     * const good = await prisma.good.upsert({
     *   create: {
     *     // ... data to create a Good
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Good we want to update
     *   }
     * })
    **/
    upsert<T extends GoodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GoodUpsertArgs<ExtArgs>>
    ): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodCountArgs} args - Arguments to filter Goods to count.
     * @example
     * // Count the number of Goods
     * const count = await prisma.good.count({
     *   where: {
     *     // ... the filter for the Goods we want to count
     *   }
     * })
    **/
    count<T extends GoodCountArgs>(
      args?: Subset<T, GoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Good.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoodAggregateArgs>(args: Subset<T, GoodAggregateArgs>): Prisma.PrismaPromise<GetGoodAggregateType<T>>

    /**
     * Group by Good.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoodGroupByArgs['orderBy'] }
        : { orderBy?: GoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Good model
   */
  readonly fields: GoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Good.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    need<T extends Good$needArgs<ExtArgs> = {}>(args?: Subset<T, Good$needArgs<ExtArgs>>): Prisma__NeedClient<$Result.GetResult<Prisma.$NeedPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    shipment<T extends ShipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShipmentDefaultArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Good model
   */ 
  interface GoodFieldRefs {
    readonly id: FieldRef<"Good", 'Int'>
    readonly name: FieldRef<"Good", 'String'>
    readonly type: FieldRef<"Good", 'Aid_Type'>
    readonly shipmentId: FieldRef<"Good", 'Int'>
    readonly needId: FieldRef<"Good", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Good findUnique
   */
  export type GoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where: GoodWhereUniqueInput
  }


  /**
   * Good findUniqueOrThrow
   */
  export type GoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where: GoodWhereUniqueInput
  }


  /**
   * Good findFirst
   */
  export type GoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }


  /**
   * Good findFirstOrThrow
   */
  export type GoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }


  /**
   * Good findMany
   */
  export type GoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }


  /**
   * Good create
   */
  export type GoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Good.
     */
    data: XOR<GoodCreateInput, GoodUncheckedCreateInput>
  }


  /**
   * Good createMany
   */
  export type GoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goods.
     */
    data: GoodCreateManyInput | GoodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Good update
   */
  export type GoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Good.
     */
    data: XOR<GoodUpdateInput, GoodUncheckedUpdateInput>
    /**
     * Choose, which Good to update.
     */
    where: GoodWhereUniqueInput
  }


  /**
   * Good updateMany
   */
  export type GoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goods.
     */
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyInput>
    /**
     * Filter which Goods to update
     */
    where?: GoodWhereInput
  }


  /**
   * Good upsert
   */
  export type GoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Good to update in case it exists.
     */
    where: GoodWhereUniqueInput
    /**
     * In case the Good found by the `where` argument doesn't exist, create a new Good with this data.
     */
    create: XOR<GoodCreateInput, GoodUncheckedCreateInput>
    /**
     * In case the Good was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoodUpdateInput, GoodUncheckedUpdateInput>
  }


  /**
   * Good delete
   */
  export type GoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter which Good to delete.
     */
    where: GoodWhereUniqueInput
  }


  /**
   * Good deleteMany
   */
  export type GoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goods to delete
     */
    where?: GoodWhereInput
  }


  /**
   * Good.need
   */
  export type Good$needArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Need
     */
    select?: NeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NeedInclude<ExtArgs> | null
    where?: NeedWhereInput
  }


  /**
   * Good without action
   */
  export type GoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodInclude<ExtArgs> | null
  }



  /**
   * Model HubStop
   */

  export type AggregateHubStop = {
    _count: HubStopCountAggregateOutputType | null
    _avg: HubStopAvgAggregateOutputType | null
    _sum: HubStopSumAggregateOutputType | null
    _min: HubStopMinAggregateOutputType | null
    _max: HubStopMaxAggregateOutputType | null
  }

  export type HubStopAvgAggregateOutputType = {
    id: number | null
    pathId: number | null
    hubId: number | null
  }

  export type HubStopSumAggregateOutputType = {
    id: number | null
    pathId: number | null
    hubId: number | null
  }

  export type HubStopMinAggregateOutputType = {
    id: number | null
    pathId: number | null
    hubId: number | null
  }

  export type HubStopMaxAggregateOutputType = {
    id: number | null
    pathId: number | null
    hubId: number | null
  }

  export type HubStopCountAggregateOutputType = {
    id: number
    pathId: number
    hubId: number
    _all: number
  }


  export type HubStopAvgAggregateInputType = {
    id?: true
    pathId?: true
    hubId?: true
  }

  export type HubStopSumAggregateInputType = {
    id?: true
    pathId?: true
    hubId?: true
  }

  export type HubStopMinAggregateInputType = {
    id?: true
    pathId?: true
    hubId?: true
  }

  export type HubStopMaxAggregateInputType = {
    id?: true
    pathId?: true
    hubId?: true
  }

  export type HubStopCountAggregateInputType = {
    id?: true
    pathId?: true
    hubId?: true
    _all?: true
  }

  export type HubStopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HubStop to aggregate.
     */
    where?: HubStopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HubStops to fetch.
     */
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HubStopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HubStops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HubStops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HubStops
    **/
    _count?: true | HubStopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HubStopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HubStopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HubStopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HubStopMaxAggregateInputType
  }

  export type GetHubStopAggregateType<T extends HubStopAggregateArgs> = {
        [P in keyof T & keyof AggregateHubStop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHubStop[P]>
      : GetScalarType<T[P], AggregateHubStop[P]>
  }




  export type HubStopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HubStopWhereInput
    orderBy?: HubStopOrderByWithAggregationInput | HubStopOrderByWithAggregationInput[]
    by: HubStopScalarFieldEnum[] | HubStopScalarFieldEnum
    having?: HubStopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HubStopCountAggregateInputType | true
    _avg?: HubStopAvgAggregateInputType
    _sum?: HubStopSumAggregateInputType
    _min?: HubStopMinAggregateInputType
    _max?: HubStopMaxAggregateInputType
  }

  export type HubStopGroupByOutputType = {
    id: number
    pathId: number
    hubId: number
    _count: HubStopCountAggregateOutputType | null
    _avg: HubStopAvgAggregateOutputType | null
    _sum: HubStopSumAggregateOutputType | null
    _min: HubStopMinAggregateOutputType | null
    _max: HubStopMaxAggregateOutputType | null
  }

  type GetHubStopGroupByPayload<T extends HubStopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HubStopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HubStopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HubStopGroupByOutputType[P]>
            : GetScalarType<T[P], HubStopGroupByOutputType[P]>
        }
      >
    >


  export type HubStopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pathId?: boolean
    hubId?: boolean
    hub?: boolean | HubDefaultArgs<ExtArgs>
    path?: boolean | PathDefaultArgs<ExtArgs>
    shipments?: boolean | HubStop$shipmentsArgs<ExtArgs>
    _count?: boolean | HubStopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hubStop"]>

  export type HubStopSelectScalar = {
    id?: boolean
    pathId?: boolean
    hubId?: boolean
  }

  export type HubStopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hub?: boolean | HubDefaultArgs<ExtArgs>
    path?: boolean | PathDefaultArgs<ExtArgs>
    shipments?: boolean | HubStop$shipmentsArgs<ExtArgs>
    _count?: boolean | HubStopCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HubStopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HubStop"
    objects: {
      hub: Prisma.$HubPayload<ExtArgs>
      path: Prisma.$PathPayload<ExtArgs>
      shipments: Prisma.$ShipmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pathId: number
      hubId: number
    }, ExtArgs["result"]["hubStop"]>
    composites: {}
  }


  type HubStopGetPayload<S extends boolean | null | undefined | HubStopDefaultArgs> = $Result.GetResult<Prisma.$HubStopPayload, S>

  type HubStopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HubStopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HubStopCountAggregateInputType | true
    }

  export interface HubStopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HubStop'], meta: { name: 'HubStop' } }
    /**
     * Find zero or one HubStop that matches the filter.
     * @param {HubStopFindUniqueArgs} args - Arguments to find a HubStop
     * @example
     * // Get one HubStop
     * const hubStop = await prisma.hubStop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HubStopFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopFindUniqueArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HubStop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HubStopFindUniqueOrThrowArgs} args - Arguments to find a HubStop
     * @example
     * // Get one HubStop
     * const hubStop = await prisma.hubStop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HubStopFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HubStop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopFindFirstArgs} args - Arguments to find a HubStop
     * @example
     * // Get one HubStop
     * const hubStop = await prisma.hubStop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HubStopFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopFindFirstArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HubStop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopFindFirstOrThrowArgs} args - Arguments to find a HubStop
     * @example
     * // Get one HubStop
     * const hubStop = await prisma.hubStop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HubStopFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HubStops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HubStops
     * const hubStops = await prisma.hubStop.findMany()
     * 
     * // Get first 10 HubStops
     * const hubStops = await prisma.hubStop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hubStopWithIdOnly = await prisma.hubStop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HubStopFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HubStop.
     * @param {HubStopCreateArgs} args - Arguments to create a HubStop.
     * @example
     * // Create one HubStop
     * const HubStop = await prisma.hubStop.create({
     *   data: {
     *     // ... data to create a HubStop
     *   }
     * })
     * 
    **/
    create<T extends HubStopCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopCreateArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HubStops.
     *     @param {HubStopCreateManyArgs} args - Arguments to create many HubStops.
     *     @example
     *     // Create many HubStops
     *     const hubStop = await prisma.hubStop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HubStopCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HubStop.
     * @param {HubStopDeleteArgs} args - Arguments to delete one HubStop.
     * @example
     * // Delete one HubStop
     * const HubStop = await prisma.hubStop.delete({
     *   where: {
     *     // ... filter to delete one HubStop
     *   }
     * })
     * 
    **/
    delete<T extends HubStopDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopDeleteArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HubStop.
     * @param {HubStopUpdateArgs} args - Arguments to update one HubStop.
     * @example
     * // Update one HubStop
     * const hubStop = await prisma.hubStop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HubStopUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopUpdateArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HubStops.
     * @param {HubStopDeleteManyArgs} args - Arguments to filter HubStops to delete.
     * @example
     * // Delete a few HubStops
     * const { count } = await prisma.hubStop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HubStopDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HubStopDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HubStops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HubStops
     * const hubStop = await prisma.hubStop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HubStopUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HubStop.
     * @param {HubStopUpsertArgs} args - Arguments to update or create a HubStop.
     * @example
     * // Update or create a HubStop
     * const hubStop = await prisma.hubStop.upsert({
     *   create: {
     *     // ... data to create a HubStop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HubStop we want to update
     *   }
     * })
    **/
    upsert<T extends HubStopUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HubStopUpsertArgs<ExtArgs>>
    ): Prisma__HubStopClient<$Result.GetResult<Prisma.$HubStopPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HubStops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopCountArgs} args - Arguments to filter HubStops to count.
     * @example
     * // Count the number of HubStops
     * const count = await prisma.hubStop.count({
     *   where: {
     *     // ... the filter for the HubStops we want to count
     *   }
     * })
    **/
    count<T extends HubStopCountArgs>(
      args?: Subset<T, HubStopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HubStopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HubStop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HubStopAggregateArgs>(args: Subset<T, HubStopAggregateArgs>): Prisma.PrismaPromise<GetHubStopAggregateType<T>>

    /**
     * Group by HubStop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HubStopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HubStopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HubStopGroupByArgs['orderBy'] }
        : { orderBy?: HubStopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HubStopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHubStopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HubStop model
   */
  readonly fields: HubStopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HubStop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HubStopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hub<T extends HubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HubDefaultArgs<ExtArgs>>): Prisma__HubClient<$Result.GetResult<Prisma.$HubPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    path<T extends PathDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PathDefaultArgs<ExtArgs>>): Prisma__PathClient<$Result.GetResult<Prisma.$PathPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    shipments<T extends HubStop$shipmentsArgs<ExtArgs> = {}>(args?: Subset<T, HubStop$shipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HubStop model
   */ 
  interface HubStopFieldRefs {
    readonly id: FieldRef<"HubStop", 'Int'>
    readonly pathId: FieldRef<"HubStop", 'Int'>
    readonly hubId: FieldRef<"HubStop", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * HubStop findUnique
   */
  export type HubStopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter, which HubStop to fetch.
     */
    where: HubStopWhereUniqueInput
  }


  /**
   * HubStop findUniqueOrThrow
   */
  export type HubStopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter, which HubStop to fetch.
     */
    where: HubStopWhereUniqueInput
  }


  /**
   * HubStop findFirst
   */
  export type HubStopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter, which HubStop to fetch.
     */
    where?: HubStopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HubStops to fetch.
     */
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HubStops.
     */
    cursor?: HubStopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HubStops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HubStops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HubStops.
     */
    distinct?: HubStopScalarFieldEnum | HubStopScalarFieldEnum[]
  }


  /**
   * HubStop findFirstOrThrow
   */
  export type HubStopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter, which HubStop to fetch.
     */
    where?: HubStopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HubStops to fetch.
     */
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HubStops.
     */
    cursor?: HubStopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HubStops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HubStops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HubStops.
     */
    distinct?: HubStopScalarFieldEnum | HubStopScalarFieldEnum[]
  }


  /**
   * HubStop findMany
   */
  export type HubStopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter, which HubStops to fetch.
     */
    where?: HubStopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HubStops to fetch.
     */
    orderBy?: HubStopOrderByWithRelationInput | HubStopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HubStops.
     */
    cursor?: HubStopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HubStops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HubStops.
     */
    skip?: number
    distinct?: HubStopScalarFieldEnum | HubStopScalarFieldEnum[]
  }


  /**
   * HubStop create
   */
  export type HubStopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * The data needed to create a HubStop.
     */
    data: XOR<HubStopCreateInput, HubStopUncheckedCreateInput>
  }


  /**
   * HubStop createMany
   */
  export type HubStopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HubStops.
     */
    data: HubStopCreateManyInput | HubStopCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HubStop update
   */
  export type HubStopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * The data needed to update a HubStop.
     */
    data: XOR<HubStopUpdateInput, HubStopUncheckedUpdateInput>
    /**
     * Choose, which HubStop to update.
     */
    where: HubStopWhereUniqueInput
  }


  /**
   * HubStop updateMany
   */
  export type HubStopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HubStops.
     */
    data: XOR<HubStopUpdateManyMutationInput, HubStopUncheckedUpdateManyInput>
    /**
     * Filter which HubStops to update
     */
    where?: HubStopWhereInput
  }


  /**
   * HubStop upsert
   */
  export type HubStopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * The filter to search for the HubStop to update in case it exists.
     */
    where: HubStopWhereUniqueInput
    /**
     * In case the HubStop found by the `where` argument doesn't exist, create a new HubStop with this data.
     */
    create: XOR<HubStopCreateInput, HubStopUncheckedCreateInput>
    /**
     * In case the HubStop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HubStopUpdateInput, HubStopUncheckedUpdateInput>
  }


  /**
   * HubStop delete
   */
  export type HubStopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
    /**
     * Filter which HubStop to delete.
     */
    where: HubStopWhereUniqueInput
  }


  /**
   * HubStop deleteMany
   */
  export type HubStopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HubStops to delete
     */
    where?: HubStopWhereInput
  }


  /**
   * HubStop.shipments
   */
  export type HubStop$shipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShipmentInclude<ExtArgs> | null
    where?: ShipmentWhereInput
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    cursor?: ShipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }


  /**
   * HubStop without action
   */
  export type HubStopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HubStop
     */
    select?: HubStopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HubStopInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    email: 'email',
    phone: 'phone',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HubScalarFieldEnum: {
    id: 'id',
    name: 'name',
    city: 'city',
    region: 'region',
    phone: 'phone',
    startHour: 'startHour',
    endHour: 'endHour',
    status: 'status',
    photoUrl: 'photoUrl',
    address: 'address',
    adminId: 'adminId'
  };

  export type HubScalarFieldEnum = (typeof HubScalarFieldEnum)[keyof typeof HubScalarFieldEnum]


  export const PathScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    destination: 'destination',
    stops: 'stops',
    notes: 'notes',
    driverId: 'driverId'
  };

  export type PathScalarFieldEnum = (typeof PathScalarFieldEnum)[keyof typeof PathScalarFieldEnum]


  export const NeedScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    type: 'type',
    pathId: 'pathId'
  };

  export type NeedScalarFieldEnum = (typeof NeedScalarFieldEnum)[keyof typeof NeedScalarFieldEnum]


  export const ShipmentScalarFieldEnum: {
    id: 'id',
    creationTime: 'creationTime',
    confirmTime: 'confirmTime',
    notes: 'notes',
    status: 'status',
    volunteerId: 'volunteerId',
    hubstopId: 'hubstopId'
  };

  export type ShipmentScalarFieldEnum = (typeof ShipmentScalarFieldEnum)[keyof typeof ShipmentScalarFieldEnum]


  export const GoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    shipmentId: 'shipmentId',
    needId: 'needId'
  };

  export type GoodScalarFieldEnum = (typeof GoodScalarFieldEnum)[keyof typeof GoodScalarFieldEnum]


  export const HubStopScalarFieldEnum: {
    id: 'id',
    pathId: 'pathId',
    hubId: 'hubId'
  };

  export type HubStopScalarFieldEnum = (typeof HubStopScalarFieldEnum)[keyof typeof HubStopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Aid_Type'
   */
  export type EnumAid_TypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Aid_Type'>
    


  /**
   * Reference to a field of type 'Aid_Type[]'
   */
  export type ListEnumAid_TypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Aid_Type[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    hubs?: HubListRelationFilter
    paths?: PathListRelationFilter
    shipments?: ShipmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    hubs?: HubOrderByRelationAggregateInput
    paths?: PathOrderByRelationAggregateInput
    shipments?: ShipmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    hubs?: HubListRelationFilter
    paths?: PathListRelationFilter
    shipments?: ShipmentListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    surname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type HubWhereInput = {
    AND?: HubWhereInput | HubWhereInput[]
    OR?: HubWhereInput[]
    NOT?: HubWhereInput | HubWhereInput[]
    id?: IntFilter<"Hub"> | number
    name?: StringFilter<"Hub"> | string
    city?: StringFilter<"Hub"> | string
    region?: StringFilter<"Hub"> | string
    phone?: StringFilter<"Hub"> | string
    startHour?: IntFilter<"Hub"> | number
    endHour?: IntFilter<"Hub"> | number
    status?: StringFilter<"Hub"> | string
    photoUrl?: StringNullableFilter<"Hub"> | string | null
    address?: StringFilter<"Hub"> | string
    adminId?: IntFilter<"Hub"> | number
    admin?: XOR<UserRelationFilter, UserWhereInput>
    hubstops?: HubStopListRelationFilter
  }

  export type HubOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    region?: SortOrder
    phone?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    status?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    address?: SortOrder
    adminId?: SortOrder
    admin?: UserOrderByWithRelationInput
    hubstops?: HubStopOrderByRelationAggregateInput
  }

  export type HubWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    city_region_address?: HubCityRegionAddressCompoundUniqueInput
    AND?: HubWhereInput | HubWhereInput[]
    OR?: HubWhereInput[]
    NOT?: HubWhereInput | HubWhereInput[]
    name?: StringFilter<"Hub"> | string
    city?: StringFilter<"Hub"> | string
    region?: StringFilter<"Hub"> | string
    startHour?: IntFilter<"Hub"> | number
    endHour?: IntFilter<"Hub"> | number
    status?: StringFilter<"Hub"> | string
    photoUrl?: StringNullableFilter<"Hub"> | string | null
    address?: StringFilter<"Hub"> | string
    adminId?: IntFilter<"Hub"> | number
    admin?: XOR<UserRelationFilter, UserWhereInput>
    hubstops?: HubStopListRelationFilter
  }, "id" | "phone" | "city_region_address">

  export type HubOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    region?: SortOrder
    phone?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    status?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    address?: SortOrder
    adminId?: SortOrder
    _count?: HubCountOrderByAggregateInput
    _avg?: HubAvgOrderByAggregateInput
    _max?: HubMaxOrderByAggregateInput
    _min?: HubMinOrderByAggregateInput
    _sum?: HubSumOrderByAggregateInput
  }

  export type HubScalarWhereWithAggregatesInput = {
    AND?: HubScalarWhereWithAggregatesInput | HubScalarWhereWithAggregatesInput[]
    OR?: HubScalarWhereWithAggregatesInput[]
    NOT?: HubScalarWhereWithAggregatesInput | HubScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Hub"> | number
    name?: StringWithAggregatesFilter<"Hub"> | string
    city?: StringWithAggregatesFilter<"Hub"> | string
    region?: StringWithAggregatesFilter<"Hub"> | string
    phone?: StringWithAggregatesFilter<"Hub"> | string
    startHour?: IntWithAggregatesFilter<"Hub"> | number
    endHour?: IntWithAggregatesFilter<"Hub"> | number
    status?: StringWithAggregatesFilter<"Hub"> | string
    photoUrl?: StringNullableWithAggregatesFilter<"Hub"> | string | null
    address?: StringWithAggregatesFilter<"Hub"> | string
    adminId?: IntWithAggregatesFilter<"Hub"> | number
  }

  export type PathWhereInput = {
    AND?: PathWhereInput | PathWhereInput[]
    OR?: PathWhereInput[]
    NOT?: PathWhereInput | PathWhereInput[]
    id?: IntFilter<"Path"> | number
    startTime?: DateTimeFilter<"Path"> | Date | string
    destination?: StringFilter<"Path"> | string
    stops?: StringNullableListFilter<"Path">
    notes?: StringNullableFilter<"Path"> | string | null
    driverId?: IntFilter<"Path"> | number
    hubstops?: HubStopListRelationFilter
    needs?: NeedListRelationFilter
    driver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PathOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrder
    destination?: SortOrder
    stops?: SortOrder
    notes?: SortOrderInput | SortOrder
    driverId?: SortOrder
    hubstops?: HubStopOrderByRelationAggregateInput
    needs?: NeedOrderByRelationAggregateInput
    driver?: UserOrderByWithRelationInput
  }

  export type PathWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    driverId_stops_startTime?: PathDriverIdStopsStartTimeCompoundUniqueInput
    AND?: PathWhereInput | PathWhereInput[]
    OR?: PathWhereInput[]
    NOT?: PathWhereInput | PathWhereInput[]
    startTime?: DateTimeFilter<"Path"> | Date | string
    destination?: StringFilter<"Path"> | string
    stops?: StringNullableListFilter<"Path">
    notes?: StringNullableFilter<"Path"> | string | null
    driverId?: IntFilter<"Path"> | number
    hubstops?: HubStopListRelationFilter
    needs?: NeedListRelationFilter
    driver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "driverId_stops_startTime">

  export type PathOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrder
    destination?: SortOrder
    stops?: SortOrder
    notes?: SortOrderInput | SortOrder
    driverId?: SortOrder
    _count?: PathCountOrderByAggregateInput
    _avg?: PathAvgOrderByAggregateInput
    _max?: PathMaxOrderByAggregateInput
    _min?: PathMinOrderByAggregateInput
    _sum?: PathSumOrderByAggregateInput
  }

  export type PathScalarWhereWithAggregatesInput = {
    AND?: PathScalarWhereWithAggregatesInput | PathScalarWhereWithAggregatesInput[]
    OR?: PathScalarWhereWithAggregatesInput[]
    NOT?: PathScalarWhereWithAggregatesInput | PathScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Path"> | number
    startTime?: DateTimeWithAggregatesFilter<"Path"> | Date | string
    destination?: StringWithAggregatesFilter<"Path"> | string
    stops?: StringNullableListFilter<"Path">
    notes?: StringNullableWithAggregatesFilter<"Path"> | string | null
    driverId?: IntWithAggregatesFilter<"Path"> | number
  }

  export type NeedWhereInput = {
    AND?: NeedWhereInput | NeedWhereInput[]
    OR?: NeedWhereInput[]
    NOT?: NeedWhereInput | NeedWhereInput[]
    id?: IntFilter<"Need"> | number
    name?: StringFilter<"Need"> | string
    status?: StringFilter<"Need"> | string
    type?: EnumAid_TypeFilter<"Need"> | $Enums.Aid_Type
    pathId?: IntFilter<"Need"> | number
    goods?: GoodListRelationFilter
    path?: XOR<PathRelationFilter, PathWhereInput>
  }

  export type NeedOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    pathId?: SortOrder
    goods?: GoodOrderByRelationAggregateInput
    path?: PathOrderByWithRelationInput
  }

  export type NeedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    pathId_name_type?: NeedPathIdNameTypeCompoundUniqueInput
    AND?: NeedWhereInput | NeedWhereInput[]
    OR?: NeedWhereInput[]
    NOT?: NeedWhereInput | NeedWhereInput[]
    name?: StringFilter<"Need"> | string
    status?: StringFilter<"Need"> | string
    type?: EnumAid_TypeFilter<"Need"> | $Enums.Aid_Type
    pathId?: IntFilter<"Need"> | number
    goods?: GoodListRelationFilter
    path?: XOR<PathRelationFilter, PathWhereInput>
  }, "id" | "pathId_name_type">

  export type NeedOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    pathId?: SortOrder
    _count?: NeedCountOrderByAggregateInput
    _avg?: NeedAvgOrderByAggregateInput
    _max?: NeedMaxOrderByAggregateInput
    _min?: NeedMinOrderByAggregateInput
    _sum?: NeedSumOrderByAggregateInput
  }

  export type NeedScalarWhereWithAggregatesInput = {
    AND?: NeedScalarWhereWithAggregatesInput | NeedScalarWhereWithAggregatesInput[]
    OR?: NeedScalarWhereWithAggregatesInput[]
    NOT?: NeedScalarWhereWithAggregatesInput | NeedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Need"> | number
    name?: StringWithAggregatesFilter<"Need"> | string
    status?: StringWithAggregatesFilter<"Need"> | string
    type?: EnumAid_TypeWithAggregatesFilter<"Need"> | $Enums.Aid_Type
    pathId?: IntWithAggregatesFilter<"Need"> | number
  }

  export type ShipmentWhereInput = {
    AND?: ShipmentWhereInput | ShipmentWhereInput[]
    OR?: ShipmentWhereInput[]
    NOT?: ShipmentWhereInput | ShipmentWhereInput[]
    id?: IntFilter<"Shipment"> | number
    creationTime?: DateTimeFilter<"Shipment"> | Date | string
    confirmTime?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    notes?: StringNullableFilter<"Shipment"> | string | null
    status?: StringFilter<"Shipment"> | string
    volunteerId?: IntFilter<"Shipment"> | number
    hubstopId?: IntFilter<"Shipment"> | number
    goods?: GoodListRelationFilter
    hubstop?: XOR<HubStopRelationFilter, HubStopWhereInput>
    volunteer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShipmentOrderByWithRelationInput = {
    id?: SortOrder
    creationTime?: SortOrder
    confirmTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
    goods?: GoodOrderByRelationAggregateInput
    hubstop?: HubStopOrderByWithRelationInput
    volunteer?: UserOrderByWithRelationInput
  }

  export type ShipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hubstopId_volunteerId?: ShipmentHubstopIdVolunteerIdCompoundUniqueInput
    AND?: ShipmentWhereInput | ShipmentWhereInput[]
    OR?: ShipmentWhereInput[]
    NOT?: ShipmentWhereInput | ShipmentWhereInput[]
    creationTime?: DateTimeFilter<"Shipment"> | Date | string
    confirmTime?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    notes?: StringNullableFilter<"Shipment"> | string | null
    status?: StringFilter<"Shipment"> | string
    volunteerId?: IntFilter<"Shipment"> | number
    hubstopId?: IntFilter<"Shipment"> | number
    goods?: GoodListRelationFilter
    hubstop?: XOR<HubStopRelationFilter, HubStopWhereInput>
    volunteer?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "hubstopId_volunteerId">

  export type ShipmentOrderByWithAggregationInput = {
    id?: SortOrder
    creationTime?: SortOrder
    confirmTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
    _count?: ShipmentCountOrderByAggregateInput
    _avg?: ShipmentAvgOrderByAggregateInput
    _max?: ShipmentMaxOrderByAggregateInput
    _min?: ShipmentMinOrderByAggregateInput
    _sum?: ShipmentSumOrderByAggregateInput
  }

  export type ShipmentScalarWhereWithAggregatesInput = {
    AND?: ShipmentScalarWhereWithAggregatesInput | ShipmentScalarWhereWithAggregatesInput[]
    OR?: ShipmentScalarWhereWithAggregatesInput[]
    NOT?: ShipmentScalarWhereWithAggregatesInput | ShipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shipment"> | number
    creationTime?: DateTimeWithAggregatesFilter<"Shipment"> | Date | string
    confirmTime?: DateTimeNullableWithAggregatesFilter<"Shipment"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Shipment"> | string | null
    status?: StringWithAggregatesFilter<"Shipment"> | string
    volunteerId?: IntWithAggregatesFilter<"Shipment"> | number
    hubstopId?: IntWithAggregatesFilter<"Shipment"> | number
  }

  export type GoodWhereInput = {
    AND?: GoodWhereInput | GoodWhereInput[]
    OR?: GoodWhereInput[]
    NOT?: GoodWhereInput | GoodWhereInput[]
    id?: IntFilter<"Good"> | number
    name?: StringFilter<"Good"> | string
    type?: EnumAid_TypeFilter<"Good"> | $Enums.Aid_Type
    shipmentId?: IntFilter<"Good"> | number
    needId?: IntNullableFilter<"Good"> | number | null
    need?: XOR<NeedNullableRelationFilter, NeedWhereInput> | null
    shipment?: XOR<ShipmentRelationFilter, ShipmentWhereInput>
  }

  export type GoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrderInput | SortOrder
    need?: NeedOrderByWithRelationInput
    shipment?: ShipmentOrderByWithRelationInput
  }

  export type GoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    shipmentId_name_type?: GoodShipmentIdNameTypeCompoundUniqueInput
    AND?: GoodWhereInput | GoodWhereInput[]
    OR?: GoodWhereInput[]
    NOT?: GoodWhereInput | GoodWhereInput[]
    name?: StringFilter<"Good"> | string
    type?: EnumAid_TypeFilter<"Good"> | $Enums.Aid_Type
    shipmentId?: IntFilter<"Good"> | number
    needId?: IntNullableFilter<"Good"> | number | null
    need?: XOR<NeedNullableRelationFilter, NeedWhereInput> | null
    shipment?: XOR<ShipmentRelationFilter, ShipmentWhereInput>
  }, "id" | "shipmentId_name_type">

  export type GoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrderInput | SortOrder
    _count?: GoodCountOrderByAggregateInput
    _avg?: GoodAvgOrderByAggregateInput
    _max?: GoodMaxOrderByAggregateInput
    _min?: GoodMinOrderByAggregateInput
    _sum?: GoodSumOrderByAggregateInput
  }

  export type GoodScalarWhereWithAggregatesInput = {
    AND?: GoodScalarWhereWithAggregatesInput | GoodScalarWhereWithAggregatesInput[]
    OR?: GoodScalarWhereWithAggregatesInput[]
    NOT?: GoodScalarWhereWithAggregatesInput | GoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Good"> | number
    name?: StringWithAggregatesFilter<"Good"> | string
    type?: EnumAid_TypeWithAggregatesFilter<"Good"> | $Enums.Aid_Type
    shipmentId?: IntWithAggregatesFilter<"Good"> | number
    needId?: IntNullableWithAggregatesFilter<"Good"> | number | null
  }

  export type HubStopWhereInput = {
    AND?: HubStopWhereInput | HubStopWhereInput[]
    OR?: HubStopWhereInput[]
    NOT?: HubStopWhereInput | HubStopWhereInput[]
    id?: IntFilter<"HubStop"> | number
    pathId?: IntFilter<"HubStop"> | number
    hubId?: IntFilter<"HubStop"> | number
    hub?: XOR<HubRelationFilter, HubWhereInput>
    path?: XOR<PathRelationFilter, PathWhereInput>
    shipments?: ShipmentListRelationFilter
  }

  export type HubStopOrderByWithRelationInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
    hub?: HubOrderByWithRelationInput
    path?: PathOrderByWithRelationInput
    shipments?: ShipmentOrderByRelationAggregateInput
  }

  export type HubStopWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hubId_pathId?: HubStopHubIdPathIdCompoundUniqueInput
    AND?: HubStopWhereInput | HubStopWhereInput[]
    OR?: HubStopWhereInput[]
    NOT?: HubStopWhereInput | HubStopWhereInput[]
    pathId?: IntFilter<"HubStop"> | number
    hubId?: IntFilter<"HubStop"> | number
    hub?: XOR<HubRelationFilter, HubWhereInput>
    path?: XOR<PathRelationFilter, PathWhereInput>
    shipments?: ShipmentListRelationFilter
  }, "id" | "hubId_pathId">

  export type HubStopOrderByWithAggregationInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
    _count?: HubStopCountOrderByAggregateInput
    _avg?: HubStopAvgOrderByAggregateInput
    _max?: HubStopMaxOrderByAggregateInput
    _min?: HubStopMinOrderByAggregateInput
    _sum?: HubStopSumOrderByAggregateInput
  }

  export type HubStopScalarWhereWithAggregatesInput = {
    AND?: HubStopScalarWhereWithAggregatesInput | HubStopScalarWhereWithAggregatesInput[]
    OR?: HubStopScalarWhereWithAggregatesInput[]
    NOT?: HubStopScalarWhereWithAggregatesInput | HubStopScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HubStop"> | number
    pathId?: IntWithAggregatesFilter<"HubStop"> | number
    hubId?: IntWithAggregatesFilter<"HubStop"> | number
  }

  export type UserCreateInput = {
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubCreateNestedManyWithoutAdminInput
    paths?: PathCreateNestedManyWithoutDriverInput
    shipments?: ShipmentCreateNestedManyWithoutVolunteerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubUncheckedCreateNestedManyWithoutAdminInput
    paths?: PathUncheckedCreateNestedManyWithoutDriverInput
    shipments?: ShipmentUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUpdateManyWithoutAdminNestedInput
    paths?: PathUpdateManyWithoutDriverNestedInput
    shipments?: ShipmentUpdateManyWithoutVolunteerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUncheckedUpdateManyWithoutAdminNestedInput
    paths?: PathUncheckedUpdateManyWithoutDriverNestedInput
    shipments?: ShipmentUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type HubCreateInput = {
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    admin: UserCreateNestedOneWithoutHubsInput
    hubstops?: HubStopCreateNestedManyWithoutHubInput
  }

  export type HubUncheckedCreateInput = {
    id?: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    adminId: number
    hubstops?: HubStopUncheckedCreateNestedManyWithoutHubInput
  }

  export type HubUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHubsNestedInput
    hubstops?: HubStopUpdateManyWithoutHubNestedInput
  }

  export type HubUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    adminId?: IntFieldUpdateOperationsInput | number
    hubstops?: HubStopUncheckedUpdateManyWithoutHubNestedInput
  }

  export type HubCreateManyInput = {
    id?: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    adminId: number
  }

  export type HubUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
  }

  export type HubUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    adminId?: IntFieldUpdateOperationsInput | number
  }

  export type PathCreateInput = {
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    hubstops?: HubStopCreateNestedManyWithoutPathInput
    needs?: NeedCreateNestedManyWithoutPathInput
    driver: UserCreateNestedOneWithoutPathsInput
  }

  export type PathUncheckedCreateInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    driverId: number
    hubstops?: HubStopUncheckedCreateNestedManyWithoutPathInput
    needs?: NeedUncheckedCreateNestedManyWithoutPathInput
  }

  export type PathUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hubstops?: HubStopUpdateManyWithoutPathNestedInput
    needs?: NeedUpdateManyWithoutPathNestedInput
    driver?: UserUpdateOneRequiredWithoutPathsNestedInput
  }

  export type PathUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    driverId?: IntFieldUpdateOperationsInput | number
    hubstops?: HubStopUncheckedUpdateManyWithoutPathNestedInput
    needs?: NeedUncheckedUpdateManyWithoutPathNestedInput
  }

  export type PathCreateManyInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    driverId: number
  }

  export type PathUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PathUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    driverId?: IntFieldUpdateOperationsInput | number
  }

  export type NeedCreateInput = {
    name: string
    status?: string
    type: $Enums.Aid_Type
    goods?: GoodCreateNestedManyWithoutNeedInput
    path: PathCreateNestedOneWithoutNeedsInput
  }

  export type NeedUncheckedCreateInput = {
    id?: number
    name: string
    status?: string
    type: $Enums.Aid_Type
    pathId: number
    goods?: GoodUncheckedCreateNestedManyWithoutNeedInput
  }

  export type NeedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    goods?: GoodUpdateManyWithoutNeedNestedInput
    path?: PathUpdateOneRequiredWithoutNeedsNestedInput
  }

  export type NeedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    pathId?: IntFieldUpdateOperationsInput | number
    goods?: GoodUncheckedUpdateManyWithoutNeedNestedInput
  }

  export type NeedCreateManyInput = {
    id?: number
    name: string
    status?: string
    type: $Enums.Aid_Type
    pathId: number
  }

  export type NeedUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
  }

  export type NeedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    pathId?: IntFieldUpdateOperationsInput | number
  }

  export type ShipmentCreateInput = {
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    goods?: GoodCreateNestedManyWithoutShipmentInput
    hubstop: HubStopCreateNestedOneWithoutShipmentsInput
    volunteer: UserCreateNestedOneWithoutShipmentsInput
  }

  export type ShipmentUncheckedCreateInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    volunteerId: number
    hubstopId: number
    goods?: GoodUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUpdateInput = {
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    goods?: GoodUpdateManyWithoutShipmentNestedInput
    hubstop?: HubStopUpdateOneRequiredWithoutShipmentsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutShipmentsNestedInput
  }

  export type ShipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    volunteerId?: IntFieldUpdateOperationsInput | number
    hubstopId?: IntFieldUpdateOperationsInput | number
    goods?: GoodUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentCreateManyInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    volunteerId: number
    hubstopId: number
  }

  export type ShipmentUpdateManyMutationInput = {
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ShipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    volunteerId?: IntFieldUpdateOperationsInput | number
    hubstopId?: IntFieldUpdateOperationsInput | number
  }

  export type GoodCreateInput = {
    name: string
    type: $Enums.Aid_Type
    need?: NeedCreateNestedOneWithoutGoodsInput
    shipment: ShipmentCreateNestedOneWithoutGoodsInput
  }

  export type GoodUncheckedCreateInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    shipmentId: number
    needId?: number | null
  }

  export type GoodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    need?: NeedUpdateOneWithoutGoodsNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutGoodsNestedInput
  }

  export type GoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    shipmentId?: IntFieldUpdateOperationsInput | number
    needId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GoodCreateManyInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    shipmentId: number
    needId?: number | null
  }

  export type GoodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
  }

  export type GoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    shipmentId?: IntFieldUpdateOperationsInput | number
    needId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HubStopCreateInput = {
    hub: HubCreateNestedOneWithoutHubstopsInput
    path: PathCreateNestedOneWithoutHubstopsInput
    shipments?: ShipmentCreateNestedManyWithoutHubstopInput
  }

  export type HubStopUncheckedCreateInput = {
    id?: number
    pathId: number
    hubId: number
    shipments?: ShipmentUncheckedCreateNestedManyWithoutHubstopInput
  }

  export type HubStopUpdateInput = {
    hub?: HubUpdateOneRequiredWithoutHubstopsNestedInput
    path?: PathUpdateOneRequiredWithoutHubstopsNestedInput
    shipments?: ShipmentUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pathId?: IntFieldUpdateOperationsInput | number
    hubId?: IntFieldUpdateOperationsInput | number
    shipments?: ShipmentUncheckedUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopCreateManyInput = {
    id?: number
    pathId: number
    hubId: number
  }

  export type HubStopUpdateManyMutationInput = {

  }

  export type HubStopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pathId?: IntFieldUpdateOperationsInput | number
    hubId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type HubListRelationFilter = {
    every?: HubWhereInput
    some?: HubWhereInput
    none?: HubWhereInput
  }

  export type PathListRelationFilter = {
    every?: PathWhereInput
    some?: PathWhereInput
    none?: PathWhereInput
  }

  export type ShipmentListRelationFilter = {
    every?: ShipmentWhereInput
    some?: ShipmentWhereInput
    none?: ShipmentWhereInput
  }

  export type HubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PathOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HubStopListRelationFilter = {
    every?: HubStopWhereInput
    some?: HubStopWhereInput
    none?: HubStopWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HubStopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HubCityRegionAddressCompoundUniqueInput = {
    city: string
    region: string
    address: string
  }

  export type HubCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    region?: SortOrder
    phone?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    status?: SortOrder
    photoUrl?: SortOrder
    address?: SortOrder
    adminId?: SortOrder
  }

  export type HubAvgOrderByAggregateInput = {
    id?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    adminId?: SortOrder
  }

  export type HubMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    region?: SortOrder
    phone?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    status?: SortOrder
    photoUrl?: SortOrder
    address?: SortOrder
    adminId?: SortOrder
  }

  export type HubMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    region?: SortOrder
    phone?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    status?: SortOrder
    photoUrl?: SortOrder
    address?: SortOrder
    adminId?: SortOrder
  }

  export type HubSumOrderByAggregateInput = {
    id?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    adminId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NeedListRelationFilter = {
    every?: NeedWhereInput
    some?: NeedWhereInput
    none?: NeedWhereInput
  }

  export type NeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PathDriverIdStopsStartTimeCompoundUniqueInput = {
    driverId: number
    stops: string[]
    startTime: Date | string
  }

  export type PathCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    destination?: SortOrder
    stops?: SortOrder
    notes?: SortOrder
    driverId?: SortOrder
  }

  export type PathAvgOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type PathMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    destination?: SortOrder
    notes?: SortOrder
    driverId?: SortOrder
  }

  export type PathMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    destination?: SortOrder
    notes?: SortOrder
    driverId?: SortOrder
  }

  export type PathSumOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumAid_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Aid_Type | EnumAid_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAid_TypeFilter<$PrismaModel> | $Enums.Aid_Type
  }

  export type GoodListRelationFilter = {
    every?: GoodWhereInput
    some?: GoodWhereInput
    none?: GoodWhereInput
  }

  export type PathRelationFilter = {
    is?: PathWhereInput
    isNot?: PathWhereInput
  }

  export type GoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NeedPathIdNameTypeCompoundUniqueInput = {
    pathId: number
    name: string
    type: $Enums.Aid_Type
  }

  export type NeedCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    pathId?: SortOrder
  }

  export type NeedAvgOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
  }

  export type NeedMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    pathId?: SortOrder
  }

  export type NeedMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    pathId?: SortOrder
  }

  export type NeedSumOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
  }

  export type EnumAid_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Aid_Type | EnumAid_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAid_TypeWithAggregatesFilter<$PrismaModel> | $Enums.Aid_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAid_TypeFilter<$PrismaModel>
    _max?: NestedEnumAid_TypeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type HubStopRelationFilter = {
    is?: HubStopWhereInput
    isNot?: HubStopWhereInput
  }

  export type ShipmentHubstopIdVolunteerIdCompoundUniqueInput = {
    hubstopId: number
    volunteerId: number
  }

  export type ShipmentCountOrderByAggregateInput = {
    id?: SortOrder
    creationTime?: SortOrder
    confirmTime?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
  }

  export type ShipmentAvgOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
  }

  export type ShipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    creationTime?: SortOrder
    confirmTime?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
  }

  export type ShipmentMinOrderByAggregateInput = {
    id?: SortOrder
    creationTime?: SortOrder
    confirmTime?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
  }

  export type ShipmentSumOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    hubstopId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NeedNullableRelationFilter = {
    is?: NeedWhereInput | null
    isNot?: NeedWhereInput | null
  }

  export type ShipmentRelationFilter = {
    is?: ShipmentWhereInput
    isNot?: ShipmentWhereInput
  }

  export type GoodShipmentIdNameTypeCompoundUniqueInput = {
    shipmentId: number
    name: string
    type: $Enums.Aid_Type
  }

  export type GoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrder
  }

  export type GoodAvgOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrder
  }

  export type GoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrder
  }

  export type GoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrder
  }

  export type GoodSumOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    needId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type HubRelationFilter = {
    is?: HubWhereInput
    isNot?: HubWhereInput
  }

  export type HubStopHubIdPathIdCompoundUniqueInput = {
    hubId: number
    pathId: number
  }

  export type HubStopCountOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
  }

  export type HubStopAvgOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
  }

  export type HubStopMaxOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
  }

  export type HubStopMinOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
  }

  export type HubStopSumOrderByAggregateInput = {
    id?: SortOrder
    pathId?: SortOrder
    hubId?: SortOrder
  }

  export type HubCreateNestedManyWithoutAdminInput = {
    create?: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput> | HubCreateWithoutAdminInput[] | HubUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HubCreateOrConnectWithoutAdminInput | HubCreateOrConnectWithoutAdminInput[]
    createMany?: HubCreateManyAdminInputEnvelope
    connect?: HubWhereUniqueInput | HubWhereUniqueInput[]
  }

  export type PathCreateNestedManyWithoutDriverInput = {
    create?: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput> | PathCreateWithoutDriverInput[] | PathUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PathCreateOrConnectWithoutDriverInput | PathCreateOrConnectWithoutDriverInput[]
    createMany?: PathCreateManyDriverInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type ShipmentCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput> | ShipmentCreateWithoutVolunteerInput[] | ShipmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutVolunteerInput | ShipmentCreateOrConnectWithoutVolunteerInput[]
    createMany?: ShipmentCreateManyVolunteerInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type HubUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput> | HubCreateWithoutAdminInput[] | HubUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HubCreateOrConnectWithoutAdminInput | HubCreateOrConnectWithoutAdminInput[]
    createMany?: HubCreateManyAdminInputEnvelope
    connect?: HubWhereUniqueInput | HubWhereUniqueInput[]
  }

  export type PathUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput> | PathCreateWithoutDriverInput[] | PathUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PathCreateOrConnectWithoutDriverInput | PathCreateOrConnectWithoutDriverInput[]
    createMany?: PathCreateManyDriverInputEnvelope
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
  }

  export type ShipmentUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput> | ShipmentCreateWithoutVolunteerInput[] | ShipmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutVolunteerInput | ShipmentCreateOrConnectWithoutVolunteerInput[]
    createMany?: ShipmentCreateManyVolunteerInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type HubUpdateManyWithoutAdminNestedInput = {
    create?: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput> | HubCreateWithoutAdminInput[] | HubUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HubCreateOrConnectWithoutAdminInput | HubCreateOrConnectWithoutAdminInput[]
    upsert?: HubUpsertWithWhereUniqueWithoutAdminInput | HubUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: HubCreateManyAdminInputEnvelope
    set?: HubWhereUniqueInput | HubWhereUniqueInput[]
    disconnect?: HubWhereUniqueInput | HubWhereUniqueInput[]
    delete?: HubWhereUniqueInput | HubWhereUniqueInput[]
    connect?: HubWhereUniqueInput | HubWhereUniqueInput[]
    update?: HubUpdateWithWhereUniqueWithoutAdminInput | HubUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: HubUpdateManyWithWhereWithoutAdminInput | HubUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: HubScalarWhereInput | HubScalarWhereInput[]
  }

  export type PathUpdateManyWithoutDriverNestedInput = {
    create?: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput> | PathCreateWithoutDriverInput[] | PathUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PathCreateOrConnectWithoutDriverInput | PathCreateOrConnectWithoutDriverInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutDriverInput | PathUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: PathCreateManyDriverInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutDriverInput | PathUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: PathUpdateManyWithWhereWithoutDriverInput | PathUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type ShipmentUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput> | ShipmentCreateWithoutVolunteerInput[] | ShipmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutVolunteerInput | ShipmentCreateOrConnectWithoutVolunteerInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutVolunteerInput | ShipmentUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: ShipmentCreateManyVolunteerInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutVolunteerInput | ShipmentUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutVolunteerInput | ShipmentUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HubUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput> | HubCreateWithoutAdminInput[] | HubUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HubCreateOrConnectWithoutAdminInput | HubCreateOrConnectWithoutAdminInput[]
    upsert?: HubUpsertWithWhereUniqueWithoutAdminInput | HubUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: HubCreateManyAdminInputEnvelope
    set?: HubWhereUniqueInput | HubWhereUniqueInput[]
    disconnect?: HubWhereUniqueInput | HubWhereUniqueInput[]
    delete?: HubWhereUniqueInput | HubWhereUniqueInput[]
    connect?: HubWhereUniqueInput | HubWhereUniqueInput[]
    update?: HubUpdateWithWhereUniqueWithoutAdminInput | HubUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: HubUpdateManyWithWhereWithoutAdminInput | HubUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: HubScalarWhereInput | HubScalarWhereInput[]
  }

  export type PathUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput> | PathCreateWithoutDriverInput[] | PathUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PathCreateOrConnectWithoutDriverInput | PathCreateOrConnectWithoutDriverInput[]
    upsert?: PathUpsertWithWhereUniqueWithoutDriverInput | PathUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: PathCreateManyDriverInputEnvelope
    set?: PathWhereUniqueInput | PathWhereUniqueInput[]
    disconnect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    delete?: PathWhereUniqueInput | PathWhereUniqueInput[]
    connect?: PathWhereUniqueInput | PathWhereUniqueInput[]
    update?: PathUpdateWithWhereUniqueWithoutDriverInput | PathUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: PathUpdateManyWithWhereWithoutDriverInput | PathUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: PathScalarWhereInput | PathScalarWhereInput[]
  }

  export type ShipmentUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput> | ShipmentCreateWithoutVolunteerInput[] | ShipmentUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutVolunteerInput | ShipmentCreateOrConnectWithoutVolunteerInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutVolunteerInput | ShipmentUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: ShipmentCreateManyVolunteerInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutVolunteerInput | ShipmentUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutVolunteerInput | ShipmentUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHubsInput = {
    create?: XOR<UserCreateWithoutHubsInput, UserUncheckedCreateWithoutHubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHubsInput
    connect?: UserWhereUniqueInput
  }

  export type HubStopCreateNestedManyWithoutHubInput = {
    create?: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput> | HubStopCreateWithoutHubInput[] | HubStopUncheckedCreateWithoutHubInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutHubInput | HubStopCreateOrConnectWithoutHubInput[]
    createMany?: HubStopCreateManyHubInputEnvelope
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
  }

  export type HubStopUncheckedCreateNestedManyWithoutHubInput = {
    create?: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput> | HubStopCreateWithoutHubInput[] | HubStopUncheckedCreateWithoutHubInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutHubInput | HubStopCreateOrConnectWithoutHubInput[]
    createMany?: HubStopCreateManyHubInputEnvelope
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutHubsNestedInput = {
    create?: XOR<UserCreateWithoutHubsInput, UserUncheckedCreateWithoutHubsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHubsInput
    upsert?: UserUpsertWithoutHubsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHubsInput, UserUpdateWithoutHubsInput>, UserUncheckedUpdateWithoutHubsInput>
  }

  export type HubStopUpdateManyWithoutHubNestedInput = {
    create?: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput> | HubStopCreateWithoutHubInput[] | HubStopUncheckedCreateWithoutHubInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutHubInput | HubStopCreateOrConnectWithoutHubInput[]
    upsert?: HubStopUpsertWithWhereUniqueWithoutHubInput | HubStopUpsertWithWhereUniqueWithoutHubInput[]
    createMany?: HubStopCreateManyHubInputEnvelope
    set?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    disconnect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    delete?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    update?: HubStopUpdateWithWhereUniqueWithoutHubInput | HubStopUpdateWithWhereUniqueWithoutHubInput[]
    updateMany?: HubStopUpdateManyWithWhereWithoutHubInput | HubStopUpdateManyWithWhereWithoutHubInput[]
    deleteMany?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
  }

  export type HubStopUncheckedUpdateManyWithoutHubNestedInput = {
    create?: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput> | HubStopCreateWithoutHubInput[] | HubStopUncheckedCreateWithoutHubInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutHubInput | HubStopCreateOrConnectWithoutHubInput[]
    upsert?: HubStopUpsertWithWhereUniqueWithoutHubInput | HubStopUpsertWithWhereUniqueWithoutHubInput[]
    createMany?: HubStopCreateManyHubInputEnvelope
    set?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    disconnect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    delete?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    update?: HubStopUpdateWithWhereUniqueWithoutHubInput | HubStopUpdateWithWhereUniqueWithoutHubInput[]
    updateMany?: HubStopUpdateManyWithWhereWithoutHubInput | HubStopUpdateManyWithWhereWithoutHubInput[]
    deleteMany?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
  }

  export type PathCreatestopsInput = {
    set: string[]
  }

  export type HubStopCreateNestedManyWithoutPathInput = {
    create?: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput> | HubStopCreateWithoutPathInput[] | HubStopUncheckedCreateWithoutPathInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutPathInput | HubStopCreateOrConnectWithoutPathInput[]
    createMany?: HubStopCreateManyPathInputEnvelope
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
  }

  export type NeedCreateNestedManyWithoutPathInput = {
    create?: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput> | NeedCreateWithoutPathInput[] | NeedUncheckedCreateWithoutPathInput[]
    connectOrCreate?: NeedCreateOrConnectWithoutPathInput | NeedCreateOrConnectWithoutPathInput[]
    createMany?: NeedCreateManyPathInputEnvelope
    connect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPathsInput = {
    create?: XOR<UserCreateWithoutPathsInput, UserUncheckedCreateWithoutPathsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPathsInput
    connect?: UserWhereUniqueInput
  }

  export type HubStopUncheckedCreateNestedManyWithoutPathInput = {
    create?: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput> | HubStopCreateWithoutPathInput[] | HubStopUncheckedCreateWithoutPathInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutPathInput | HubStopCreateOrConnectWithoutPathInput[]
    createMany?: HubStopCreateManyPathInputEnvelope
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
  }

  export type NeedUncheckedCreateNestedManyWithoutPathInput = {
    create?: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput> | NeedCreateWithoutPathInput[] | NeedUncheckedCreateWithoutPathInput[]
    connectOrCreate?: NeedCreateOrConnectWithoutPathInput | NeedCreateOrConnectWithoutPathInput[]
    createMany?: NeedCreateManyPathInputEnvelope
    connect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PathUpdatestopsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type HubStopUpdateManyWithoutPathNestedInput = {
    create?: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput> | HubStopCreateWithoutPathInput[] | HubStopUncheckedCreateWithoutPathInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutPathInput | HubStopCreateOrConnectWithoutPathInput[]
    upsert?: HubStopUpsertWithWhereUniqueWithoutPathInput | HubStopUpsertWithWhereUniqueWithoutPathInput[]
    createMany?: HubStopCreateManyPathInputEnvelope
    set?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    disconnect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    delete?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    update?: HubStopUpdateWithWhereUniqueWithoutPathInput | HubStopUpdateWithWhereUniqueWithoutPathInput[]
    updateMany?: HubStopUpdateManyWithWhereWithoutPathInput | HubStopUpdateManyWithWhereWithoutPathInput[]
    deleteMany?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
  }

  export type NeedUpdateManyWithoutPathNestedInput = {
    create?: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput> | NeedCreateWithoutPathInput[] | NeedUncheckedCreateWithoutPathInput[]
    connectOrCreate?: NeedCreateOrConnectWithoutPathInput | NeedCreateOrConnectWithoutPathInput[]
    upsert?: NeedUpsertWithWhereUniqueWithoutPathInput | NeedUpsertWithWhereUniqueWithoutPathInput[]
    createMany?: NeedCreateManyPathInputEnvelope
    set?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    disconnect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    delete?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    connect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    update?: NeedUpdateWithWhereUniqueWithoutPathInput | NeedUpdateWithWhereUniqueWithoutPathInput[]
    updateMany?: NeedUpdateManyWithWhereWithoutPathInput | NeedUpdateManyWithWhereWithoutPathInput[]
    deleteMany?: NeedScalarWhereInput | NeedScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPathsNestedInput = {
    create?: XOR<UserCreateWithoutPathsInput, UserUncheckedCreateWithoutPathsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPathsInput
    upsert?: UserUpsertWithoutPathsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPathsInput, UserUpdateWithoutPathsInput>, UserUncheckedUpdateWithoutPathsInput>
  }

  export type HubStopUncheckedUpdateManyWithoutPathNestedInput = {
    create?: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput> | HubStopCreateWithoutPathInput[] | HubStopUncheckedCreateWithoutPathInput[]
    connectOrCreate?: HubStopCreateOrConnectWithoutPathInput | HubStopCreateOrConnectWithoutPathInput[]
    upsert?: HubStopUpsertWithWhereUniqueWithoutPathInput | HubStopUpsertWithWhereUniqueWithoutPathInput[]
    createMany?: HubStopCreateManyPathInputEnvelope
    set?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    disconnect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    delete?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    connect?: HubStopWhereUniqueInput | HubStopWhereUniqueInput[]
    update?: HubStopUpdateWithWhereUniqueWithoutPathInput | HubStopUpdateWithWhereUniqueWithoutPathInput[]
    updateMany?: HubStopUpdateManyWithWhereWithoutPathInput | HubStopUpdateManyWithWhereWithoutPathInput[]
    deleteMany?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
  }

  export type NeedUncheckedUpdateManyWithoutPathNestedInput = {
    create?: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput> | NeedCreateWithoutPathInput[] | NeedUncheckedCreateWithoutPathInput[]
    connectOrCreate?: NeedCreateOrConnectWithoutPathInput | NeedCreateOrConnectWithoutPathInput[]
    upsert?: NeedUpsertWithWhereUniqueWithoutPathInput | NeedUpsertWithWhereUniqueWithoutPathInput[]
    createMany?: NeedCreateManyPathInputEnvelope
    set?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    disconnect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    delete?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    connect?: NeedWhereUniqueInput | NeedWhereUniqueInput[]
    update?: NeedUpdateWithWhereUniqueWithoutPathInput | NeedUpdateWithWhereUniqueWithoutPathInput[]
    updateMany?: NeedUpdateManyWithWhereWithoutPathInput | NeedUpdateManyWithWhereWithoutPathInput[]
    deleteMany?: NeedScalarWhereInput | NeedScalarWhereInput[]
  }

  export type GoodCreateNestedManyWithoutNeedInput = {
    create?: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput> | GoodCreateWithoutNeedInput[] | GoodUncheckedCreateWithoutNeedInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutNeedInput | GoodCreateOrConnectWithoutNeedInput[]
    createMany?: GoodCreateManyNeedInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type PathCreateNestedOneWithoutNeedsInput = {
    create?: XOR<PathCreateWithoutNeedsInput, PathUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: PathCreateOrConnectWithoutNeedsInput
    connect?: PathWhereUniqueInput
  }

  export type GoodUncheckedCreateNestedManyWithoutNeedInput = {
    create?: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput> | GoodCreateWithoutNeedInput[] | GoodUncheckedCreateWithoutNeedInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutNeedInput | GoodCreateOrConnectWithoutNeedInput[]
    createMany?: GoodCreateManyNeedInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type EnumAid_TypeFieldUpdateOperationsInput = {
    set?: $Enums.Aid_Type
  }

  export type GoodUpdateManyWithoutNeedNestedInput = {
    create?: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput> | GoodCreateWithoutNeedInput[] | GoodUncheckedCreateWithoutNeedInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutNeedInput | GoodCreateOrConnectWithoutNeedInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutNeedInput | GoodUpsertWithWhereUniqueWithoutNeedInput[]
    createMany?: GoodCreateManyNeedInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutNeedInput | GoodUpdateWithWhereUniqueWithoutNeedInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutNeedInput | GoodUpdateManyWithWhereWithoutNeedInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type PathUpdateOneRequiredWithoutNeedsNestedInput = {
    create?: XOR<PathCreateWithoutNeedsInput, PathUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: PathCreateOrConnectWithoutNeedsInput
    upsert?: PathUpsertWithoutNeedsInput
    connect?: PathWhereUniqueInput
    update?: XOR<XOR<PathUpdateToOneWithWhereWithoutNeedsInput, PathUpdateWithoutNeedsInput>, PathUncheckedUpdateWithoutNeedsInput>
  }

  export type GoodUncheckedUpdateManyWithoutNeedNestedInput = {
    create?: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput> | GoodCreateWithoutNeedInput[] | GoodUncheckedCreateWithoutNeedInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutNeedInput | GoodCreateOrConnectWithoutNeedInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutNeedInput | GoodUpsertWithWhereUniqueWithoutNeedInput[]
    createMany?: GoodCreateManyNeedInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutNeedInput | GoodUpdateWithWhereUniqueWithoutNeedInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutNeedInput | GoodUpdateManyWithWhereWithoutNeedInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type GoodCreateNestedManyWithoutShipmentInput = {
    create?: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput> | GoodCreateWithoutShipmentInput[] | GoodUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutShipmentInput | GoodCreateOrConnectWithoutShipmentInput[]
    createMany?: GoodCreateManyShipmentInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type HubStopCreateNestedOneWithoutShipmentsInput = {
    create?: XOR<HubStopCreateWithoutShipmentsInput, HubStopUncheckedCreateWithoutShipmentsInput>
    connectOrCreate?: HubStopCreateOrConnectWithoutShipmentsInput
    connect?: HubStopWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutShipmentsInput = {
    create?: XOR<UserCreateWithoutShipmentsInput, UserUncheckedCreateWithoutShipmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipmentsInput
    connect?: UserWhereUniqueInput
  }

  export type GoodUncheckedCreateNestedManyWithoutShipmentInput = {
    create?: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput> | GoodCreateWithoutShipmentInput[] | GoodUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutShipmentInput | GoodCreateOrConnectWithoutShipmentInput[]
    createMany?: GoodCreateManyShipmentInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GoodUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput> | GoodCreateWithoutShipmentInput[] | GoodUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutShipmentInput | GoodCreateOrConnectWithoutShipmentInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutShipmentInput | GoodUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: GoodCreateManyShipmentInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutShipmentInput | GoodUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutShipmentInput | GoodUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type HubStopUpdateOneRequiredWithoutShipmentsNestedInput = {
    create?: XOR<HubStopCreateWithoutShipmentsInput, HubStopUncheckedCreateWithoutShipmentsInput>
    connectOrCreate?: HubStopCreateOrConnectWithoutShipmentsInput
    upsert?: HubStopUpsertWithoutShipmentsInput
    connect?: HubStopWhereUniqueInput
    update?: XOR<XOR<HubStopUpdateToOneWithWhereWithoutShipmentsInput, HubStopUpdateWithoutShipmentsInput>, HubStopUncheckedUpdateWithoutShipmentsInput>
  }

  export type UserUpdateOneRequiredWithoutShipmentsNestedInput = {
    create?: XOR<UserCreateWithoutShipmentsInput, UserUncheckedCreateWithoutShipmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipmentsInput
    upsert?: UserUpsertWithoutShipmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShipmentsInput, UserUpdateWithoutShipmentsInput>, UserUncheckedUpdateWithoutShipmentsInput>
  }

  export type GoodUncheckedUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput> | GoodCreateWithoutShipmentInput[] | GoodUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutShipmentInput | GoodCreateOrConnectWithoutShipmentInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutShipmentInput | GoodUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: GoodCreateManyShipmentInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutShipmentInput | GoodUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutShipmentInput | GoodUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type NeedCreateNestedOneWithoutGoodsInput = {
    create?: XOR<NeedCreateWithoutGoodsInput, NeedUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: NeedCreateOrConnectWithoutGoodsInput
    connect?: NeedWhereUniqueInput
  }

  export type ShipmentCreateNestedOneWithoutGoodsInput = {
    create?: XOR<ShipmentCreateWithoutGoodsInput, ShipmentUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutGoodsInput
    connect?: ShipmentWhereUniqueInput
  }

  export type NeedUpdateOneWithoutGoodsNestedInput = {
    create?: XOR<NeedCreateWithoutGoodsInput, NeedUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: NeedCreateOrConnectWithoutGoodsInput
    upsert?: NeedUpsertWithoutGoodsInput
    disconnect?: NeedWhereInput | boolean
    delete?: NeedWhereInput | boolean
    connect?: NeedWhereUniqueInput
    update?: XOR<XOR<NeedUpdateToOneWithWhereWithoutGoodsInput, NeedUpdateWithoutGoodsInput>, NeedUncheckedUpdateWithoutGoodsInput>
  }

  export type ShipmentUpdateOneRequiredWithoutGoodsNestedInput = {
    create?: XOR<ShipmentCreateWithoutGoodsInput, ShipmentUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutGoodsInput
    upsert?: ShipmentUpsertWithoutGoodsInput
    connect?: ShipmentWhereUniqueInput
    update?: XOR<XOR<ShipmentUpdateToOneWithWhereWithoutGoodsInput, ShipmentUpdateWithoutGoodsInput>, ShipmentUncheckedUpdateWithoutGoodsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HubCreateNestedOneWithoutHubstopsInput = {
    create?: XOR<HubCreateWithoutHubstopsInput, HubUncheckedCreateWithoutHubstopsInput>
    connectOrCreate?: HubCreateOrConnectWithoutHubstopsInput
    connect?: HubWhereUniqueInput
  }

  export type PathCreateNestedOneWithoutHubstopsInput = {
    create?: XOR<PathCreateWithoutHubstopsInput, PathUncheckedCreateWithoutHubstopsInput>
    connectOrCreate?: PathCreateOrConnectWithoutHubstopsInput
    connect?: PathWhereUniqueInput
  }

  export type ShipmentCreateNestedManyWithoutHubstopInput = {
    create?: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput> | ShipmentCreateWithoutHubstopInput[] | ShipmentUncheckedCreateWithoutHubstopInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutHubstopInput | ShipmentCreateOrConnectWithoutHubstopInput[]
    createMany?: ShipmentCreateManyHubstopInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type ShipmentUncheckedCreateNestedManyWithoutHubstopInput = {
    create?: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput> | ShipmentCreateWithoutHubstopInput[] | ShipmentUncheckedCreateWithoutHubstopInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutHubstopInput | ShipmentCreateOrConnectWithoutHubstopInput[]
    createMany?: ShipmentCreateManyHubstopInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type HubUpdateOneRequiredWithoutHubstopsNestedInput = {
    create?: XOR<HubCreateWithoutHubstopsInput, HubUncheckedCreateWithoutHubstopsInput>
    connectOrCreate?: HubCreateOrConnectWithoutHubstopsInput
    upsert?: HubUpsertWithoutHubstopsInput
    connect?: HubWhereUniqueInput
    update?: XOR<XOR<HubUpdateToOneWithWhereWithoutHubstopsInput, HubUpdateWithoutHubstopsInput>, HubUncheckedUpdateWithoutHubstopsInput>
  }

  export type PathUpdateOneRequiredWithoutHubstopsNestedInput = {
    create?: XOR<PathCreateWithoutHubstopsInput, PathUncheckedCreateWithoutHubstopsInput>
    connectOrCreate?: PathCreateOrConnectWithoutHubstopsInput
    upsert?: PathUpsertWithoutHubstopsInput
    connect?: PathWhereUniqueInput
    update?: XOR<XOR<PathUpdateToOneWithWhereWithoutHubstopsInput, PathUpdateWithoutHubstopsInput>, PathUncheckedUpdateWithoutHubstopsInput>
  }

  export type ShipmentUpdateManyWithoutHubstopNestedInput = {
    create?: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput> | ShipmentCreateWithoutHubstopInput[] | ShipmentUncheckedCreateWithoutHubstopInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutHubstopInput | ShipmentCreateOrConnectWithoutHubstopInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutHubstopInput | ShipmentUpsertWithWhereUniqueWithoutHubstopInput[]
    createMany?: ShipmentCreateManyHubstopInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutHubstopInput | ShipmentUpdateWithWhereUniqueWithoutHubstopInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutHubstopInput | ShipmentUpdateManyWithWhereWithoutHubstopInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type ShipmentUncheckedUpdateManyWithoutHubstopNestedInput = {
    create?: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput> | ShipmentCreateWithoutHubstopInput[] | ShipmentUncheckedCreateWithoutHubstopInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutHubstopInput | ShipmentCreateOrConnectWithoutHubstopInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutHubstopInput | ShipmentUpsertWithWhereUniqueWithoutHubstopInput[]
    createMany?: ShipmentCreateManyHubstopInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutHubstopInput | ShipmentUpdateWithWhereUniqueWithoutHubstopInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutHubstopInput | ShipmentUpdateManyWithWhereWithoutHubstopInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAid_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Aid_Type | EnumAid_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAid_TypeFilter<$PrismaModel> | $Enums.Aid_Type
  }

  export type NestedEnumAid_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Aid_Type | EnumAid_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Aid_Type[] | ListEnumAid_TypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAid_TypeWithAggregatesFilter<$PrismaModel> | $Enums.Aid_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAid_TypeFilter<$PrismaModel>
    _max?: NestedEnumAid_TypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type HubCreateWithoutAdminInput = {
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    hubstops?: HubStopCreateNestedManyWithoutHubInput
  }

  export type HubUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    hubstops?: HubStopUncheckedCreateNestedManyWithoutHubInput
  }

  export type HubCreateOrConnectWithoutAdminInput = {
    where: HubWhereUniqueInput
    create: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput>
  }

  export type HubCreateManyAdminInputEnvelope = {
    data: HubCreateManyAdminInput | HubCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type PathCreateWithoutDriverInput = {
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    hubstops?: HubStopCreateNestedManyWithoutPathInput
    needs?: NeedCreateNestedManyWithoutPathInput
  }

  export type PathUncheckedCreateWithoutDriverInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    hubstops?: HubStopUncheckedCreateNestedManyWithoutPathInput
    needs?: NeedUncheckedCreateNestedManyWithoutPathInput
  }

  export type PathCreateOrConnectWithoutDriverInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput>
  }

  export type PathCreateManyDriverInputEnvelope = {
    data: PathCreateManyDriverInput | PathCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type ShipmentCreateWithoutVolunteerInput = {
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    goods?: GoodCreateNestedManyWithoutShipmentInput
    hubstop: HubStopCreateNestedOneWithoutShipmentsInput
  }

  export type ShipmentUncheckedCreateWithoutVolunteerInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    hubstopId: number
    goods?: GoodUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutVolunteerInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput>
  }

  export type ShipmentCreateManyVolunteerInputEnvelope = {
    data: ShipmentCreateManyVolunteerInput | ShipmentCreateManyVolunteerInput[]
    skipDuplicates?: boolean
  }

  export type HubUpsertWithWhereUniqueWithoutAdminInput = {
    where: HubWhereUniqueInput
    update: XOR<HubUpdateWithoutAdminInput, HubUncheckedUpdateWithoutAdminInput>
    create: XOR<HubCreateWithoutAdminInput, HubUncheckedCreateWithoutAdminInput>
  }

  export type HubUpdateWithWhereUniqueWithoutAdminInput = {
    where: HubWhereUniqueInput
    data: XOR<HubUpdateWithoutAdminInput, HubUncheckedUpdateWithoutAdminInput>
  }

  export type HubUpdateManyWithWhereWithoutAdminInput = {
    where: HubScalarWhereInput
    data: XOR<HubUpdateManyMutationInput, HubUncheckedUpdateManyWithoutAdminInput>
  }

  export type HubScalarWhereInput = {
    AND?: HubScalarWhereInput | HubScalarWhereInput[]
    OR?: HubScalarWhereInput[]
    NOT?: HubScalarWhereInput | HubScalarWhereInput[]
    id?: IntFilter<"Hub"> | number
    name?: StringFilter<"Hub"> | string
    city?: StringFilter<"Hub"> | string
    region?: StringFilter<"Hub"> | string
    phone?: StringFilter<"Hub"> | string
    startHour?: IntFilter<"Hub"> | number
    endHour?: IntFilter<"Hub"> | number
    status?: StringFilter<"Hub"> | string
    photoUrl?: StringNullableFilter<"Hub"> | string | null
    address?: StringFilter<"Hub"> | string
    adminId?: IntFilter<"Hub"> | number
  }

  export type PathUpsertWithWhereUniqueWithoutDriverInput = {
    where: PathWhereUniqueInput
    update: XOR<PathUpdateWithoutDriverInput, PathUncheckedUpdateWithoutDriverInput>
    create: XOR<PathCreateWithoutDriverInput, PathUncheckedCreateWithoutDriverInput>
  }

  export type PathUpdateWithWhereUniqueWithoutDriverInput = {
    where: PathWhereUniqueInput
    data: XOR<PathUpdateWithoutDriverInput, PathUncheckedUpdateWithoutDriverInput>
  }

  export type PathUpdateManyWithWhereWithoutDriverInput = {
    where: PathScalarWhereInput
    data: XOR<PathUpdateManyMutationInput, PathUncheckedUpdateManyWithoutDriverInput>
  }

  export type PathScalarWhereInput = {
    AND?: PathScalarWhereInput | PathScalarWhereInput[]
    OR?: PathScalarWhereInput[]
    NOT?: PathScalarWhereInput | PathScalarWhereInput[]
    id?: IntFilter<"Path"> | number
    startTime?: DateTimeFilter<"Path"> | Date | string
    destination?: StringFilter<"Path"> | string
    stops?: StringNullableListFilter<"Path">
    notes?: StringNullableFilter<"Path"> | string | null
    driverId?: IntFilter<"Path"> | number
  }

  export type ShipmentUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: ShipmentWhereUniqueInput
    update: XOR<ShipmentUpdateWithoutVolunteerInput, ShipmentUncheckedUpdateWithoutVolunteerInput>
    create: XOR<ShipmentCreateWithoutVolunteerInput, ShipmentUncheckedCreateWithoutVolunteerInput>
  }

  export type ShipmentUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: ShipmentWhereUniqueInput
    data: XOR<ShipmentUpdateWithoutVolunteerInput, ShipmentUncheckedUpdateWithoutVolunteerInput>
  }

  export type ShipmentUpdateManyWithWhereWithoutVolunteerInput = {
    where: ShipmentScalarWhereInput
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type ShipmentScalarWhereInput = {
    AND?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
    OR?: ShipmentScalarWhereInput[]
    NOT?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
    id?: IntFilter<"Shipment"> | number
    creationTime?: DateTimeFilter<"Shipment"> | Date | string
    confirmTime?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    notes?: StringNullableFilter<"Shipment"> | string | null
    status?: StringFilter<"Shipment"> | string
    volunteerId?: IntFilter<"Shipment"> | number
    hubstopId?: IntFilter<"Shipment"> | number
  }

  export type UserCreateWithoutHubsInput = {
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    paths?: PathCreateNestedManyWithoutDriverInput
    shipments?: ShipmentCreateNestedManyWithoutVolunteerInput
  }

  export type UserUncheckedCreateWithoutHubsInput = {
    id?: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    paths?: PathUncheckedCreateNestedManyWithoutDriverInput
    shipments?: ShipmentUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type UserCreateOrConnectWithoutHubsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHubsInput, UserUncheckedCreateWithoutHubsInput>
  }

  export type HubStopCreateWithoutHubInput = {
    path: PathCreateNestedOneWithoutHubstopsInput
    shipments?: ShipmentCreateNestedManyWithoutHubstopInput
  }

  export type HubStopUncheckedCreateWithoutHubInput = {
    id?: number
    pathId: number
    shipments?: ShipmentUncheckedCreateNestedManyWithoutHubstopInput
  }

  export type HubStopCreateOrConnectWithoutHubInput = {
    where: HubStopWhereUniqueInput
    create: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput>
  }

  export type HubStopCreateManyHubInputEnvelope = {
    data: HubStopCreateManyHubInput | HubStopCreateManyHubInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHubsInput = {
    update: XOR<UserUpdateWithoutHubsInput, UserUncheckedUpdateWithoutHubsInput>
    create: XOR<UserCreateWithoutHubsInput, UserUncheckedCreateWithoutHubsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHubsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHubsInput, UserUncheckedUpdateWithoutHubsInput>
  }

  export type UserUpdateWithoutHubsInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    paths?: PathUpdateManyWithoutDriverNestedInput
    shipments?: ShipmentUpdateManyWithoutVolunteerNestedInput
  }

  export type UserUncheckedUpdateWithoutHubsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    paths?: PathUncheckedUpdateManyWithoutDriverNestedInput
    shipments?: ShipmentUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type HubStopUpsertWithWhereUniqueWithoutHubInput = {
    where: HubStopWhereUniqueInput
    update: XOR<HubStopUpdateWithoutHubInput, HubStopUncheckedUpdateWithoutHubInput>
    create: XOR<HubStopCreateWithoutHubInput, HubStopUncheckedCreateWithoutHubInput>
  }

  export type HubStopUpdateWithWhereUniqueWithoutHubInput = {
    where: HubStopWhereUniqueInput
    data: XOR<HubStopUpdateWithoutHubInput, HubStopUncheckedUpdateWithoutHubInput>
  }

  export type HubStopUpdateManyWithWhereWithoutHubInput = {
    where: HubStopScalarWhereInput
    data: XOR<HubStopUpdateManyMutationInput, HubStopUncheckedUpdateManyWithoutHubInput>
  }

  export type HubStopScalarWhereInput = {
    AND?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
    OR?: HubStopScalarWhereInput[]
    NOT?: HubStopScalarWhereInput | HubStopScalarWhereInput[]
    id?: IntFilter<"HubStop"> | number
    pathId?: IntFilter<"HubStop"> | number
    hubId?: IntFilter<"HubStop"> | number
  }

  export type HubStopCreateWithoutPathInput = {
    hub: HubCreateNestedOneWithoutHubstopsInput
    shipments?: ShipmentCreateNestedManyWithoutHubstopInput
  }

  export type HubStopUncheckedCreateWithoutPathInput = {
    id?: number
    hubId: number
    shipments?: ShipmentUncheckedCreateNestedManyWithoutHubstopInput
  }

  export type HubStopCreateOrConnectWithoutPathInput = {
    where: HubStopWhereUniqueInput
    create: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput>
  }

  export type HubStopCreateManyPathInputEnvelope = {
    data: HubStopCreateManyPathInput | HubStopCreateManyPathInput[]
    skipDuplicates?: boolean
  }

  export type NeedCreateWithoutPathInput = {
    name: string
    status?: string
    type: $Enums.Aid_Type
    goods?: GoodCreateNestedManyWithoutNeedInput
  }

  export type NeedUncheckedCreateWithoutPathInput = {
    id?: number
    name: string
    status?: string
    type: $Enums.Aid_Type
    goods?: GoodUncheckedCreateNestedManyWithoutNeedInput
  }

  export type NeedCreateOrConnectWithoutPathInput = {
    where: NeedWhereUniqueInput
    create: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput>
  }

  export type NeedCreateManyPathInputEnvelope = {
    data: NeedCreateManyPathInput | NeedCreateManyPathInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPathsInput = {
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubCreateNestedManyWithoutAdminInput
    shipments?: ShipmentCreateNestedManyWithoutVolunteerInput
  }

  export type UserUncheckedCreateWithoutPathsInput = {
    id?: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubUncheckedCreateNestedManyWithoutAdminInput
    shipments?: ShipmentUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type UserCreateOrConnectWithoutPathsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPathsInput, UserUncheckedCreateWithoutPathsInput>
  }

  export type HubStopUpsertWithWhereUniqueWithoutPathInput = {
    where: HubStopWhereUniqueInput
    update: XOR<HubStopUpdateWithoutPathInput, HubStopUncheckedUpdateWithoutPathInput>
    create: XOR<HubStopCreateWithoutPathInput, HubStopUncheckedCreateWithoutPathInput>
  }

  export type HubStopUpdateWithWhereUniqueWithoutPathInput = {
    where: HubStopWhereUniqueInput
    data: XOR<HubStopUpdateWithoutPathInput, HubStopUncheckedUpdateWithoutPathInput>
  }

  export type HubStopUpdateManyWithWhereWithoutPathInput = {
    where: HubStopScalarWhereInput
    data: XOR<HubStopUpdateManyMutationInput, HubStopUncheckedUpdateManyWithoutPathInput>
  }

  export type NeedUpsertWithWhereUniqueWithoutPathInput = {
    where: NeedWhereUniqueInput
    update: XOR<NeedUpdateWithoutPathInput, NeedUncheckedUpdateWithoutPathInput>
    create: XOR<NeedCreateWithoutPathInput, NeedUncheckedCreateWithoutPathInput>
  }

  export type NeedUpdateWithWhereUniqueWithoutPathInput = {
    where: NeedWhereUniqueInput
    data: XOR<NeedUpdateWithoutPathInput, NeedUncheckedUpdateWithoutPathInput>
  }

  export type NeedUpdateManyWithWhereWithoutPathInput = {
    where: NeedScalarWhereInput
    data: XOR<NeedUpdateManyMutationInput, NeedUncheckedUpdateManyWithoutPathInput>
  }

  export type NeedScalarWhereInput = {
    AND?: NeedScalarWhereInput | NeedScalarWhereInput[]
    OR?: NeedScalarWhereInput[]
    NOT?: NeedScalarWhereInput | NeedScalarWhereInput[]
    id?: IntFilter<"Need"> | number
    name?: StringFilter<"Need"> | string
    status?: StringFilter<"Need"> | string
    type?: EnumAid_TypeFilter<"Need"> | $Enums.Aid_Type
    pathId?: IntFilter<"Need"> | number
  }

  export type UserUpsertWithoutPathsInput = {
    update: XOR<UserUpdateWithoutPathsInput, UserUncheckedUpdateWithoutPathsInput>
    create: XOR<UserCreateWithoutPathsInput, UserUncheckedCreateWithoutPathsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPathsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPathsInput, UserUncheckedUpdateWithoutPathsInput>
  }

  export type UserUpdateWithoutPathsInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUpdateManyWithoutAdminNestedInput
    shipments?: ShipmentUpdateManyWithoutVolunteerNestedInput
  }

  export type UserUncheckedUpdateWithoutPathsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUncheckedUpdateManyWithoutAdminNestedInput
    shipments?: ShipmentUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type GoodCreateWithoutNeedInput = {
    name: string
    type: $Enums.Aid_Type
    shipment: ShipmentCreateNestedOneWithoutGoodsInput
  }

  export type GoodUncheckedCreateWithoutNeedInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    shipmentId: number
  }

  export type GoodCreateOrConnectWithoutNeedInput = {
    where: GoodWhereUniqueInput
    create: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput>
  }

  export type GoodCreateManyNeedInputEnvelope = {
    data: GoodCreateManyNeedInput | GoodCreateManyNeedInput[]
    skipDuplicates?: boolean
  }

  export type PathCreateWithoutNeedsInput = {
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    hubstops?: HubStopCreateNestedManyWithoutPathInput
    driver: UserCreateNestedOneWithoutPathsInput
  }

  export type PathUncheckedCreateWithoutNeedsInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    driverId: number
    hubstops?: HubStopUncheckedCreateNestedManyWithoutPathInput
  }

  export type PathCreateOrConnectWithoutNeedsInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutNeedsInput, PathUncheckedCreateWithoutNeedsInput>
  }

  export type GoodUpsertWithWhereUniqueWithoutNeedInput = {
    where: GoodWhereUniqueInput
    update: XOR<GoodUpdateWithoutNeedInput, GoodUncheckedUpdateWithoutNeedInput>
    create: XOR<GoodCreateWithoutNeedInput, GoodUncheckedCreateWithoutNeedInput>
  }

  export type GoodUpdateWithWhereUniqueWithoutNeedInput = {
    where: GoodWhereUniqueInput
    data: XOR<GoodUpdateWithoutNeedInput, GoodUncheckedUpdateWithoutNeedInput>
  }

  export type GoodUpdateManyWithWhereWithoutNeedInput = {
    where: GoodScalarWhereInput
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyWithoutNeedInput>
  }

  export type GoodScalarWhereInput = {
    AND?: GoodScalarWhereInput | GoodScalarWhereInput[]
    OR?: GoodScalarWhereInput[]
    NOT?: GoodScalarWhereInput | GoodScalarWhereInput[]
    id?: IntFilter<"Good"> | number
    name?: StringFilter<"Good"> | string
    type?: EnumAid_TypeFilter<"Good"> | $Enums.Aid_Type
    shipmentId?: IntFilter<"Good"> | number
    needId?: IntNullableFilter<"Good"> | number | null
  }

  export type PathUpsertWithoutNeedsInput = {
    update: XOR<PathUpdateWithoutNeedsInput, PathUncheckedUpdateWithoutNeedsInput>
    create: XOR<PathCreateWithoutNeedsInput, PathUncheckedCreateWithoutNeedsInput>
    where?: PathWhereInput
  }

  export type PathUpdateToOneWithWhereWithoutNeedsInput = {
    where?: PathWhereInput
    data: XOR<PathUpdateWithoutNeedsInput, PathUncheckedUpdateWithoutNeedsInput>
  }

  export type PathUpdateWithoutNeedsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hubstops?: HubStopUpdateManyWithoutPathNestedInput
    driver?: UserUpdateOneRequiredWithoutPathsNestedInput
  }

  export type PathUncheckedUpdateWithoutNeedsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    driverId?: IntFieldUpdateOperationsInput | number
    hubstops?: HubStopUncheckedUpdateManyWithoutPathNestedInput
  }

  export type GoodCreateWithoutShipmentInput = {
    name: string
    type: $Enums.Aid_Type
    need?: NeedCreateNestedOneWithoutGoodsInput
  }

  export type GoodUncheckedCreateWithoutShipmentInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    needId?: number | null
  }

  export type GoodCreateOrConnectWithoutShipmentInput = {
    where: GoodWhereUniqueInput
    create: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput>
  }

  export type GoodCreateManyShipmentInputEnvelope = {
    data: GoodCreateManyShipmentInput | GoodCreateManyShipmentInput[]
    skipDuplicates?: boolean
  }

  export type HubStopCreateWithoutShipmentsInput = {
    hub: HubCreateNestedOneWithoutHubstopsInput
    path: PathCreateNestedOneWithoutHubstopsInput
  }

  export type HubStopUncheckedCreateWithoutShipmentsInput = {
    id?: number
    pathId: number
    hubId: number
  }

  export type HubStopCreateOrConnectWithoutShipmentsInput = {
    where: HubStopWhereUniqueInput
    create: XOR<HubStopCreateWithoutShipmentsInput, HubStopUncheckedCreateWithoutShipmentsInput>
  }

  export type UserCreateWithoutShipmentsInput = {
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubCreateNestedManyWithoutAdminInput
    paths?: PathCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutShipmentsInput = {
    id?: number
    name: string
    surname: string
    email: string
    phone: string
    password: string
    role: $Enums.Role
    hubs?: HubUncheckedCreateNestedManyWithoutAdminInput
    paths?: PathUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutShipmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShipmentsInput, UserUncheckedCreateWithoutShipmentsInput>
  }

  export type GoodUpsertWithWhereUniqueWithoutShipmentInput = {
    where: GoodWhereUniqueInput
    update: XOR<GoodUpdateWithoutShipmentInput, GoodUncheckedUpdateWithoutShipmentInput>
    create: XOR<GoodCreateWithoutShipmentInput, GoodUncheckedCreateWithoutShipmentInput>
  }

  export type GoodUpdateWithWhereUniqueWithoutShipmentInput = {
    where: GoodWhereUniqueInput
    data: XOR<GoodUpdateWithoutShipmentInput, GoodUncheckedUpdateWithoutShipmentInput>
  }

  export type GoodUpdateManyWithWhereWithoutShipmentInput = {
    where: GoodScalarWhereInput
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyWithoutShipmentInput>
  }

  export type HubStopUpsertWithoutShipmentsInput = {
    update: XOR<HubStopUpdateWithoutShipmentsInput, HubStopUncheckedUpdateWithoutShipmentsInput>
    create: XOR<HubStopCreateWithoutShipmentsInput, HubStopUncheckedCreateWithoutShipmentsInput>
    where?: HubStopWhereInput
  }

  export type HubStopUpdateToOneWithWhereWithoutShipmentsInput = {
    where?: HubStopWhereInput
    data: XOR<HubStopUpdateWithoutShipmentsInput, HubStopUncheckedUpdateWithoutShipmentsInput>
  }

  export type HubStopUpdateWithoutShipmentsInput = {
    hub?: HubUpdateOneRequiredWithoutHubstopsNestedInput
    path?: PathUpdateOneRequiredWithoutHubstopsNestedInput
  }

  export type HubStopUncheckedUpdateWithoutShipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    pathId?: IntFieldUpdateOperationsInput | number
    hubId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutShipmentsInput = {
    update: XOR<UserUpdateWithoutShipmentsInput, UserUncheckedUpdateWithoutShipmentsInput>
    create: XOR<UserCreateWithoutShipmentsInput, UserUncheckedCreateWithoutShipmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShipmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShipmentsInput, UserUncheckedUpdateWithoutShipmentsInput>
  }

  export type UserUpdateWithoutShipmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUpdateManyWithoutAdminNestedInput
    paths?: PathUpdateManyWithoutDriverNestedInput
  }

  export type UserUncheckedUpdateWithoutShipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hubs?: HubUncheckedUpdateManyWithoutAdminNestedInput
    paths?: PathUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type NeedCreateWithoutGoodsInput = {
    name: string
    status?: string
    type: $Enums.Aid_Type
    path: PathCreateNestedOneWithoutNeedsInput
  }

  export type NeedUncheckedCreateWithoutGoodsInput = {
    id?: number
    name: string
    status?: string
    type: $Enums.Aid_Type
    pathId: number
  }

  export type NeedCreateOrConnectWithoutGoodsInput = {
    where: NeedWhereUniqueInput
    create: XOR<NeedCreateWithoutGoodsInput, NeedUncheckedCreateWithoutGoodsInput>
  }

  export type ShipmentCreateWithoutGoodsInput = {
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    hubstop: HubStopCreateNestedOneWithoutShipmentsInput
    volunteer: UserCreateNestedOneWithoutShipmentsInput
  }

  export type ShipmentUncheckedCreateWithoutGoodsInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    volunteerId: number
    hubstopId: number
  }

  export type ShipmentCreateOrConnectWithoutGoodsInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutGoodsInput, ShipmentUncheckedCreateWithoutGoodsInput>
  }

  export type NeedUpsertWithoutGoodsInput = {
    update: XOR<NeedUpdateWithoutGoodsInput, NeedUncheckedUpdateWithoutGoodsInput>
    create: XOR<NeedCreateWithoutGoodsInput, NeedUncheckedCreateWithoutGoodsInput>
    where?: NeedWhereInput
  }

  export type NeedUpdateToOneWithWhereWithoutGoodsInput = {
    where?: NeedWhereInput
    data: XOR<NeedUpdateWithoutGoodsInput, NeedUncheckedUpdateWithoutGoodsInput>
  }

  export type NeedUpdateWithoutGoodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    path?: PathUpdateOneRequiredWithoutNeedsNestedInput
  }

  export type NeedUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    pathId?: IntFieldUpdateOperationsInput | number
  }

  export type ShipmentUpsertWithoutGoodsInput = {
    update: XOR<ShipmentUpdateWithoutGoodsInput, ShipmentUncheckedUpdateWithoutGoodsInput>
    create: XOR<ShipmentCreateWithoutGoodsInput, ShipmentUncheckedCreateWithoutGoodsInput>
    where?: ShipmentWhereInput
  }

  export type ShipmentUpdateToOneWithWhereWithoutGoodsInput = {
    where?: ShipmentWhereInput
    data: XOR<ShipmentUpdateWithoutGoodsInput, ShipmentUncheckedUpdateWithoutGoodsInput>
  }

  export type ShipmentUpdateWithoutGoodsInput = {
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    hubstop?: HubStopUpdateOneRequiredWithoutShipmentsNestedInput
    volunteer?: UserUpdateOneRequiredWithoutShipmentsNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    volunteerId?: IntFieldUpdateOperationsInput | number
    hubstopId?: IntFieldUpdateOperationsInput | number
  }

  export type HubCreateWithoutHubstopsInput = {
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    admin: UserCreateNestedOneWithoutHubsInput
  }

  export type HubUncheckedCreateWithoutHubstopsInput = {
    id?: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
    adminId: number
  }

  export type HubCreateOrConnectWithoutHubstopsInput = {
    where: HubWhereUniqueInput
    create: XOR<HubCreateWithoutHubstopsInput, HubUncheckedCreateWithoutHubstopsInput>
  }

  export type PathCreateWithoutHubstopsInput = {
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    needs?: NeedCreateNestedManyWithoutPathInput
    driver: UserCreateNestedOneWithoutPathsInput
  }

  export type PathUncheckedCreateWithoutHubstopsInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
    driverId: number
    needs?: NeedUncheckedCreateNestedManyWithoutPathInput
  }

  export type PathCreateOrConnectWithoutHubstopsInput = {
    where: PathWhereUniqueInput
    create: XOR<PathCreateWithoutHubstopsInput, PathUncheckedCreateWithoutHubstopsInput>
  }

  export type ShipmentCreateWithoutHubstopInput = {
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    goods?: GoodCreateNestedManyWithoutShipmentInput
    volunteer: UserCreateNestedOneWithoutShipmentsInput
  }

  export type ShipmentUncheckedCreateWithoutHubstopInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    volunteerId: number
    goods?: GoodUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutHubstopInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput>
  }

  export type ShipmentCreateManyHubstopInputEnvelope = {
    data: ShipmentCreateManyHubstopInput | ShipmentCreateManyHubstopInput[]
    skipDuplicates?: boolean
  }

  export type HubUpsertWithoutHubstopsInput = {
    update: XOR<HubUpdateWithoutHubstopsInput, HubUncheckedUpdateWithoutHubstopsInput>
    create: XOR<HubCreateWithoutHubstopsInput, HubUncheckedCreateWithoutHubstopsInput>
    where?: HubWhereInput
  }

  export type HubUpdateToOneWithWhereWithoutHubstopsInput = {
    where?: HubWhereInput
    data: XOR<HubUpdateWithoutHubstopsInput, HubUncheckedUpdateWithoutHubstopsInput>
  }

  export type HubUpdateWithoutHubstopsInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHubsNestedInput
  }

  export type HubUncheckedUpdateWithoutHubstopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    adminId?: IntFieldUpdateOperationsInput | number
  }

  export type PathUpsertWithoutHubstopsInput = {
    update: XOR<PathUpdateWithoutHubstopsInput, PathUncheckedUpdateWithoutHubstopsInput>
    create: XOR<PathCreateWithoutHubstopsInput, PathUncheckedCreateWithoutHubstopsInput>
    where?: PathWhereInput
  }

  export type PathUpdateToOneWithWhereWithoutHubstopsInput = {
    where?: PathWhereInput
    data: XOR<PathUpdateWithoutHubstopsInput, PathUncheckedUpdateWithoutHubstopsInput>
  }

  export type PathUpdateWithoutHubstopsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    needs?: NeedUpdateManyWithoutPathNestedInput
    driver?: UserUpdateOneRequiredWithoutPathsNestedInput
  }

  export type PathUncheckedUpdateWithoutHubstopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    driverId?: IntFieldUpdateOperationsInput | number
    needs?: NeedUncheckedUpdateManyWithoutPathNestedInput
  }

  export type ShipmentUpsertWithWhereUniqueWithoutHubstopInput = {
    where: ShipmentWhereUniqueInput
    update: XOR<ShipmentUpdateWithoutHubstopInput, ShipmentUncheckedUpdateWithoutHubstopInput>
    create: XOR<ShipmentCreateWithoutHubstopInput, ShipmentUncheckedCreateWithoutHubstopInput>
  }

  export type ShipmentUpdateWithWhereUniqueWithoutHubstopInput = {
    where: ShipmentWhereUniqueInput
    data: XOR<ShipmentUpdateWithoutHubstopInput, ShipmentUncheckedUpdateWithoutHubstopInput>
  }

  export type ShipmentUpdateManyWithWhereWithoutHubstopInput = {
    where: ShipmentScalarWhereInput
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyWithoutHubstopInput>
  }

  export type HubCreateManyAdminInput = {
    id?: number
    name: string
    city: string
    region: string
    phone: string
    startHour: number
    endHour: number
    status?: string
    photoUrl?: string | null
    address: string
  }

  export type PathCreateManyDriverInput = {
    id?: number
    startTime: Date | string
    destination: string
    stops?: PathCreatestopsInput | string[]
    notes?: string | null
  }

  export type ShipmentCreateManyVolunteerInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    hubstopId: number
  }

  export type HubUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    hubstops?: HubStopUpdateManyWithoutHubNestedInput
  }

  export type HubUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    hubstops?: HubStopUncheckedUpdateManyWithoutHubNestedInput
  }

  export type HubUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
  }

  export type PathUpdateWithoutDriverInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hubstops?: HubStopUpdateManyWithoutPathNestedInput
    needs?: NeedUpdateManyWithoutPathNestedInput
  }

  export type PathUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hubstops?: HubStopUncheckedUpdateManyWithoutPathNestedInput
    needs?: NeedUncheckedUpdateManyWithoutPathNestedInput
  }

  export type PathUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: StringFieldUpdateOperationsInput | string
    stops?: PathUpdatestopsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShipmentUpdateWithoutVolunteerInput = {
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    goods?: GoodUpdateManyWithoutShipmentNestedInput
    hubstop?: HubStopUpdateOneRequiredWithoutShipmentsNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutVolunteerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    hubstopId?: IntFieldUpdateOperationsInput | number
    goods?: GoodUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateManyWithoutVolunteerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    hubstopId?: IntFieldUpdateOperationsInput | number
  }

  export type HubStopCreateManyHubInput = {
    id?: number
    pathId: number
  }

  export type HubStopUpdateWithoutHubInput = {
    path?: PathUpdateOneRequiredWithoutHubstopsNestedInput
    shipments?: ShipmentUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopUncheckedUpdateWithoutHubInput = {
    id?: IntFieldUpdateOperationsInput | number
    pathId?: IntFieldUpdateOperationsInput | number
    shipments?: ShipmentUncheckedUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopUncheckedUpdateManyWithoutHubInput = {
    id?: IntFieldUpdateOperationsInput | number
    pathId?: IntFieldUpdateOperationsInput | number
  }

  export type HubStopCreateManyPathInput = {
    id?: number
    hubId: number
  }

  export type NeedCreateManyPathInput = {
    id?: number
    name: string
    status?: string
    type: $Enums.Aid_Type
  }

  export type HubStopUpdateWithoutPathInput = {
    hub?: HubUpdateOneRequiredWithoutHubstopsNestedInput
    shipments?: ShipmentUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopUncheckedUpdateWithoutPathInput = {
    id?: IntFieldUpdateOperationsInput | number
    hubId?: IntFieldUpdateOperationsInput | number
    shipments?: ShipmentUncheckedUpdateManyWithoutHubstopNestedInput
  }

  export type HubStopUncheckedUpdateManyWithoutPathInput = {
    id?: IntFieldUpdateOperationsInput | number
    hubId?: IntFieldUpdateOperationsInput | number
  }

  export type NeedUpdateWithoutPathInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    goods?: GoodUpdateManyWithoutNeedNestedInput
  }

  export type NeedUncheckedUpdateWithoutPathInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    goods?: GoodUncheckedUpdateManyWithoutNeedNestedInput
  }

  export type NeedUncheckedUpdateManyWithoutPathInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
  }

  export type GoodCreateManyNeedInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    shipmentId: number
  }

  export type GoodUpdateWithoutNeedInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    shipment?: ShipmentUpdateOneRequiredWithoutGoodsNestedInput
  }

  export type GoodUncheckedUpdateWithoutNeedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type GoodUncheckedUpdateManyWithoutNeedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type GoodCreateManyShipmentInput = {
    id?: number
    name: string
    type: $Enums.Aid_Type
    needId?: number | null
  }

  export type GoodUpdateWithoutShipmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    need?: NeedUpdateOneWithoutGoodsNestedInput
  }

  export type GoodUncheckedUpdateWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    needId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GoodUncheckedUpdateManyWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAid_TypeFieldUpdateOperationsInput | $Enums.Aid_Type
    needId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShipmentCreateManyHubstopInput = {
    id?: number
    creationTime?: Date | string
    confirmTime?: Date | string | null
    notes?: string | null
    status?: string
    volunteerId: number
  }

  export type ShipmentUpdateWithoutHubstopInput = {
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    goods?: GoodUpdateManyWithoutShipmentNestedInput
    volunteer?: UserUpdateOneRequiredWithoutShipmentsNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutHubstopInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    volunteerId?: IntFieldUpdateOperationsInput | number
    goods?: GoodUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateManyWithoutHubstopInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    volunteerId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HubCountOutputTypeDefaultArgs instead
     */
    export type HubCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HubCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PathCountOutputTypeDefaultArgs instead
     */
    export type PathCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PathCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NeedCountOutputTypeDefaultArgs instead
     */
    export type NeedCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NeedCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShipmentCountOutputTypeDefaultArgs instead
     */
    export type ShipmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShipmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HubStopCountOutputTypeDefaultArgs instead
     */
    export type HubStopCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HubStopCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HubDefaultArgs instead
     */
    export type HubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HubDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PathDefaultArgs instead
     */
    export type PathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PathDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NeedDefaultArgs instead
     */
    export type NeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NeedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShipmentDefaultArgs instead
     */
    export type ShipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShipmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoodDefaultArgs instead
     */
    export type GoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HubStopDefaultArgs instead
     */
    export type HubStopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HubStopDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}